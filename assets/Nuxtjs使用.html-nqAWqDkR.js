import{_ as i,c as o,d as a,a as p,b as l,e as n,w as t,r as c,o as r}from"./app-BI9Ul3hK.js";const u={},d={id:"安装-如何用",tabindex:"-1"},k={class:"header-anchor",href:"#安装-如何用"},v={id:"useasyncdata",tabindex:"-1"},m={class:"header-anchor",href:"#useasyncdata"},g={id:"_1-为什么nuxt-build之后前后端启动都指向了-output-server-index-mjs",tabindex:"-1"},b={class:"header-anchor",href:"#_1-为什么nuxt-build之后前后端启动都指向了-output-server-index-mjs"};function h(y,s){const e=c("font");return r(),o("div",null,[s[55]||(s[55]=a("h2",{id:"简介-是什么",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#简介-是什么"},[a("span",null,"简介 - 是什么？")])],-1)),a("p",null,[s[5]||(s[5]=n("nuxtjs ",-1)),p(e,{style:{color:"rgb(44, 44, 54)"}},{default:t(()=>s[0]||(s[0]=[n("简化了 Vue.js 应用的开发过程，可以帮助开发者",-1)])),_:1,__:[0]}),a("strong",null,[p(e,{style:{color:"#DF2A3F"}},{default:t(()=>s[1]||(s[1]=[n("高效构建SPA/SSR应用",-1)])),_:1,__:[1]})]),p(e,{style:{color:"rgb(44, 44, 54)"}},{default:t(()=>s[2]||(s[2]=[n("。同时也兼具",-1)])),_:1,__:[2]}),p(e,{style:{color:"#DF2A3F"}},{default:t(()=>s[3]||(s[3]=[n("后端开发",-1)])),_:1,__:[3]}),p(e,{style:{color:"rgb(44, 44, 54)"}},{default:t(()=>s[4]||(s[4]=[n("能力，也就是说Nuxtjs是一个全栈开发框架。",-1)])),_:1,__:[4]})]),p(e,{style:{color:"rgb(44, 44, 54)"}},{default:t(()=>s[6]||(s[6]=[n("官网：",-1)])),_:1,__:[6]}),s[56]||(s[56]=l('<a href="https://nuxt.com/docs/4.x/getting-started/installation" target="_blank" rel="noopener noreferrer">https://nuxt.com/docs/4.x/getting-started/installation</a><h3 id="spa" tabindex="-1"><a class="header-anchor" href="#spa"><span>- SPA</span></a></h3><p>spa是单页面应用，又称客户端渲染CSR</p><h3 id="mpa" tabindex="-1"><a class="header-anchor" href="#mpa"><span>- MPA</span></a></h3><p>mpa是多页面应用，又称服务端渲染SSR</p><h2 id="优势-为什么用" tabindex="-1"><a class="header-anchor" href="#优势-为什么用"><span>优势 - 为什么用？</span></a></h2>',6)),a("p",null,[s[8]||(s[8]=n("nuxtjs 有助于网站**",-1)),p(e,{style:{color:"#2F8EF4"}},{default:t(()=>s[7]||(s[7]=[n("SEO",-1)])),_:1,__:[7]}),s[9]||(s[9]=n("**网络引擎优化。",-1))]),a("h2",d,[a("a",k,[a("span",null,[p(e,{style:{color:"rgb(44, 44, 54)"}},{default:t(()=>s[10]||(s[10]=[n("安装 - 如何用？",-1)])),_:1,__:[10]})])])]),s[57]||(s[57]=l(`<p>下面是Nuxtjs 4.0+ 版本使用命令：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># 注意node环境</span></span>
<span class="line"><span class="token function">npm</span> create nuxt <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment"># vscode打开项目</span></span>
<span class="line">code <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nuxtjs4.0与3.0版本的区别？</p><ul><li>目录结构，4.0前端相关目录都在app目录下，3.0都在根目录下，目录结构更清晰。</li></ul><h3 id="_1-components-定义组件" tabindex="-1"><a class="header-anchor" href="#_1-components-定义组件"><span>1.components 定义组件</span></a></h3><p>在components目录下的插件默认是全局组件，可以不需要引入，直接在项目中使用。</p><p>例如：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    header <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">&gt;</span></span>xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span><span class="token punctuation">&gt;</span></span>头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Header</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ts<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多层级组件" tabindex="-1"><a class="header-anchor" href="#多层级组件"><span>多层级组件</span></a></h4><p>多目录层级的组件，可以用驼峰式 BaseMenus，或破折号使用 base-menus 。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/1460947/1753352971120-bd2ecb60-2cc9-4be9-886f-d365aed74820.png" alt=""></p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>flex-aic-jcfs<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BaseLogo</span> <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>headerObj<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BaseMenus</span> <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>headerObj.menus<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BaseLogin</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Main</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="内置组件" tabindex="-1"><a class="header-anchor" href="#内置组件"><span>内置组件</span></a></h4>`,15)),a("p",null,[s[11]||(s[11]=n("常用的ClientOnly - 客户端渲染、Teleport、NuxtTime、NuxtLayout、NuxtLink、NuxtIsland - 纯静态组件、NuxtImg，更多组件：",-1)),a("strong",null,[p(e,{style:{color:"rgb(255, 255, 255)"}})]),s[12]||(s[12]=a("a",{href:"https://nuxt.com/docs/4.x/api/components/client-only",target:"_blank",rel:"noopener noreferrer"},"https://nuxt.com/docs/4.x/api/components/client-only",-1))]),s[58]||(s[58]=l(`<h3 id="_2-pages-路由" tabindex="-1"><a class="header-anchor" href="#_2-pages-路由"><span>2.pages 路由</span></a></h3><p>在pages目录创建的页面等于就开启了路由。基于目录结构创建动态路由。</p><p>如果删掉app.vue,在pages创建index.vue，恭喜你创建了多页面应用！</p><h4 id="动态模版" tabindex="-1"><a class="header-anchor" href="#动态模版"><span>动态模版</span></a></h4><p>针对动态路由 /article?id=2 或 /article/2 可以创建 article目录，里面 [id].vue 这样表示动态模版页。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/1460947/1753352766171-b9ac6ff5-af8a-4b14-98ee-44e690048721.png" alt=""></p><p>动态参数获取：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">const route <span class="token operator">=</span> useRoute<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">const <span class="token function">id</span> <span class="token operator">=</span> route.params.id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="路由跳转" tabindex="-1"><a class="header-anchor" href="#路由跳转"><span>路由跳转</span></a></h4><ul><li>a 链接，使用NuxtLink跳转</li></ul><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLink</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLink</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>js里使用 navigateTo跳转</li></ul><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line">navigateTo(&#39;/login&#39;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-layout布局" tabindex="-1"><a class="header-anchor" href="#_3-layout布局"><span>3.layout布局</span></a></h3><p>如果在前端目录创建layouts文件夹，新建default.vue 页面。那整个项目默认会自动嵌套在layouts里面。这对开发后台应用很有利。换句话说，app.vue没有使用 NuxtLayout 组件，但是有layouts/default目录文件，也会自动生效。</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>def-layout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2025/png/1460947/1753409123250-da07f240-285a-4d07-99db-c1160e6eb8c7.png" alt=""></p><h4 id="动态布局layout" tabindex="-1"><a class="header-anchor" href="#动态布局layout"><span>动态布局Layout</span></a></h4><p>使用 NuxtLayout 内置组件实现 layout切换，指定layout的name属性。</p><p>我们先layouts目录先创建一个home.vue的文件:</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>home-layout<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在首页使用NuxtLayout并动态指定模板名称。不能直接写死name，否则不生效。</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NuxtLayout</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>layoutName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Home</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NuxtLayout</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">const</span> layoutName <span class="token operator">=</span> <span class="token string">&#39;home&#39;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-store状态" tabindex="-1"><a class="header-anchor" href="#_4-store状态"><span>4.Store状态</span></a></h3><h4 id="usestate" tabindex="-1"><a class="header-anchor" href="#usestate"><span>useState</span></a></h4>`,25)),a("p",null,[s[14]||(s[14]=n("useState 是 Nuxt 3 提供的一个组合式 API，用来创建**",-1)),p(e,{style:{color:"#7E45E8"}},{default:t(()=>s[13]||(s[13]=[n("跨组件、跨请求持久化",-1)])),_:1,__:[13]}),s[15]||(s[15]=n("**的响应式状态。它本质上是一个基于 useStateAsync 和 ref 的封装。",-1))]),s[59]||(s[59]=l(`<div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>当前计数: {{ counter }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>counter++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>增加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跨组件共享：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 组件A.vue </span></span>
<span class="line"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;匿名&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 组件B.vue </span></span>
<span class="line"><span class="token keyword">const</span> sameUser <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 访问相同状态</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-seo优化" tabindex="-1"><a class="header-anchor" href="#_5-seo优化"><span>5.SEO优化</span></a></h3><h4 id="全局配置" tabindex="-1"><a class="header-anchor" href="#全局配置"><span>全局配置</span></a></h4><p>全局使用head在配置文件（nuxt.config.ts）中添加配置，但是这种优先级低，会被页面的 useHead 配置覆盖。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// nuxt.config.ts</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">app</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">head</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;默认标题&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">titleTemplate</span><span class="token operator">:</span> <span class="token string">&#39;%s - 我的网站&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token literal-property property">charset</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;viewport&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;width=device-width, initial-scale=1&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token literal-property property">hid</span><span class="token operator">:</span> <span class="token string">&#39;description&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;description&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;默认网站描述&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">link</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token literal-property property">rel</span><span class="token operator">:</span> <span class="token string">&#39;icon&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;image/x-icon&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">href</span><span class="token operator">:</span> <span class="token string">&#39;/favicon.ico&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">script</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token literal-property property">src</span><span class="token operator">:</span> <span class="token string">&#39;/global-script.js&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="页面配置" tabindex="-1"><a class="header-anchor" href="#页面配置"><span>页面配置</span></a></h4><p>在页面setup里使用hook，自定义当前页面的head信息，会替换配置文件中全局的head信息。</p><ul><li><strong>useHead 用于修改head的任何内容</strong></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">useHead</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;My App&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;description&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">&#39;My amazing site.&#39;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">bodyAttrs</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;test&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">script</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">innerHTML</span><span class="token operator">:</span> <span class="token string">&#39;console.log(\\&#39;Hello world\\&#39;)&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>useSeoMeta 可以修改TDK相关内容</strong></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">useSeoMeta</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;My Amazing Site&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">ogTitle</span><span class="token operator">:</span> <span class="token string">&#39;My Amazing Site&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;This is my amazing site, let me tell you all about it.&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">ogDescription</span><span class="token operator">:</span> <span class="token string">&#39;This is my amazing site, let me tell you all about it.&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">ogImage</span><span class="token operator">:</span> <span class="token string">&#39;https://example.com/image.png&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">twitterCard</span><span class="token operator">:</span> <span class="token string">&#39;summary_large_image&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-server-服务端" tabindex="-1"><a class="header-anchor" href="#_6-server-服务端"><span>6.server 服务端</span></a></h3>`,14)),a("p",null,[s[17]||(s[17]=n("在根目录server创建api目录，里面新增一个testapi.js（目录结构：server/api/testapi.js），定义接口需要通过**",-1)),p(e,{style:{color:"#2F8EF4"}},{default:t(()=>s[16]||(s[16]=[n("defineEventHandler",-1)])),_:1,__:[16]}),s[18]||(s[18]=n("**函数，返回接口内容，如下：",-1))]),s[60]||(s[60]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span>  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">code</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在地址栏访问<a href="http://localhost:3000/api/testapi" target="_blank" rel="noopener noreferrer">http://localhost:3000/api/testapi</a> 就可以测试接口返回内容。</p><h4 id="getquery" tabindex="-1"><a class="header-anchor" href="#getquery"><span>getQuery</span></a></h4>`,3)),a("p",null,[s[21]||(s[21]=n("获取url中的**",-1)),p(e,{style:{color:"#E4495B"}},{default:t(()=>s[19]||(s[19]=[n("query参数",-1)])),_:1,__:[19]}),s[22]||(s[22]=n("**方法，通过nuxtjs提供的 ",-1)),a("strong",null,[p(e,{style:{color:"#E4495B"}},{default:t(()=>s[20]||(s[20]=[n("getQuery",-1)])),_:1,__:[20]})]),s[23]||(s[23]=n(" 得到所有的参数对象。",-1))]),s[61]||(s[61]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token parameter">event</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 获取参数</span></span>
<span class="line">  <span class="token keyword">let</span> query <span class="token operator">=</span> <span class="token function">getQuery</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span>  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">code</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">data</span><span class="token operator">:</span> query<span class="token punctuation">.</span>id<span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;success&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，通过 url传参访问 <a href="http://localhost:3000/api/testapi?id=65" target="_blank" rel="noopener noreferrer">http://localhost:3000/api/testapi?id=65</a>，就得到下面响应内容：</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/1460947/1753163380451-ae2df826-0c72-423a-8cda-1b5806b44184.png" alt=""></p><h4 id="readbody" tabindex="-1"><a class="header-anchor" href="#readbody"><span>readBody</span></a></h4><p>获取post请求body中的参数使用<strong>readbody</strong>获取。与query参数不一样的是<strong>readbody需要</strong>异步获取。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineEventHandler</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 读取请求体</span></span>
<span class="line">  <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">readBody</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> a <span class="token operator">=</span> body<span class="token punctuation">.</span>username</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-常用hook" tabindex="-1"><a class="header-anchor" href="#_7-常用hook"><span>7.常用hook</span></a></h3><p>vue3、vue-router、Pinia等插件使用方式，不需要单独import引入，可以直接使用hook函数，如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// pinia</span></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span>  loginhandler <span class="token punctuation">}</span> <span class="token operator">=</span> store</span>
<span class="line"><span class="token comment">// vue-router</span></span>
<span class="line"><span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">useRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> id <span class="token operator">=</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="fetch-请求" tabindex="-1"><a class="header-anchor" href="#fetch-请求"><span>$fetch 请求</span></a></h4>`,10)),a("p",null,[s[25]||(s[25]=n("用于",-1)),p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[24]||(s[24]=[n("发起 GET/POST/PUT 等 HTTP 请求，类似与ajax,axios。",-1)])),_:1,__:[24]})]),a("p",null,[s[31]||(s[31]=n("特点：",-1)),p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[26]||(s[26]=[n("纯数据获取，",-1)])),_:1,__:[26]}),a("strong",null,[p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[27]||(s[27]=[n("不处理",-1)])),_:1,__:[27]})]),p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[28]||(s[28]=[n("响应缓存或 SSR 优化，可在",-1)])),_:1,__:[28]}),a("strong",null,[p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[29]||(s[29]=[n("任意地方",-1)])),_:1,__:[29]})]),p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[30]||(s[30]=[n("使用（组件、Store、API 路由）。",-1)])),_:1,__:[30]})]),s[62]||(s[62]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),a("h4",v,[a("a",m,[a("span",null,[p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[32]||(s[32]=[n("useAsyncData",-1)])),_:1,__:[32]})])])]),a("p",null,[s[34]||(s[34]=n("用于**",-1)),p(e,{style:{color:"#117CEE"}},{default:t(()=>s[33]||(s[33]=[n("管理异步数据",-1)])),_:1,__:[33]}),s[35]||(s[35]=n("**状态，专为 Nuxt 的 SSR 优化设计。",-1))]),a("p",null,[s[39]||(s[39]=n("特点：",-1)),a("strong",null,[p(e,{style:{color:"#DF2A3F"}},{default:t(()=>s[36]||(s[36]=[n("包装",-1)])),_:1,__:[36]}),s[38]||(s[38]=a("strong",null,"异步逻辑（不限于 HTTP 请求，可以是任何 async 操作），",-1)),p(e,{style:{color:"#DF2A3F"}},{default:t(()=>s[37]||(s[37]=[n("避免重复获取数据",-1)])),_:1,__:[37]})]),s[40]||(s[40]=n("（通过唯一 key 缓存）。",-1))]),s[63]||(s[63]=l(`<p>注意：必须用在组件 setup() 或生命周期钩子中。 提供加载状态 (pending)、错误处理 (error)、刷新 (refresh)</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useAsyncData</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span><span class="token keyword">async</span> fn<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 例如</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> articals <span class="token punctuation">,</span>pending<span class="token punctuation">,</span> error<span class="token punctuation">,</span> refresh <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">useAsyncData</span><span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&#39;artical&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 唯一标识</span></span>
<span class="line">  <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">$fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/artical</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span> </span>
<span class="line">        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">        <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> data</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="usefetch" tabindex="-1"><a class="header-anchor" href="#usefetch"><span>useFetch</span></a></h4><p>URL 请求的简化版 useAsyncData，内部组合了 useAsyncData 和 $fetch。 自动生成唯一 key（基于 URL 和请求参数）。</p><p>特点：代码更简洁，适合纯 HTTP 请求场景，支持与 useAsyncData 相同的状态 (data, pending, refresh 等)。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> pending<span class="token punctuation">,</span> error<span class="token punctuation">,</span> refresh <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useFetch</span><span class="token punctuation">(</span><span class="token string">&#39;/api/data&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="usecookie" tabindex="-1"><a class="header-anchor" href="#usecookie"><span>useCookie</span></a></h4><p>优雅的使用cookie。<a href="https://nuxt.com/docs/4.x/api/composables/use-cookie" target="_blank" rel="noopener noreferrer">https://nuxt.com/docs/4.x/api/composables/use-cookie</a></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useCookie</span><span class="token punctuation">(</span><span class="token string">&#39;counter&#39;</span><span class="token punctuation">)</span></span>
<span class="line">counter<span class="token punctuation">.</span>value <span class="token operator">=</span> counter<span class="token punctuation">.</span>value <span class="token operator">||</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>更多hook查阅文档：<a href="https://nuxt.com/docs/4.x/api/composables/on-prehydrate" target="_blank" rel="noopener noreferrer">https://nuxt.com/docs/4.x/api/composables/on-prehydrate</a></p><h2 id="部署-如何部署" tabindex="-1"><a class="header-anchor" href="#部署-如何部署"><span>部署 - 如何部署</span></a></h2><h3 id="_1-纯静态网站" tabindex="-1"><a class="header-anchor" href="#_1-纯静态网站"><span>1.纯静态网站</span></a></h3><p>执行打包：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> run generate</span>
<span class="line"><span class="token comment"># 或运行</span></span>
<span class="line">nuxt generate</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将dist目录内容扔到静态服务器根目录即可！例如，PhpStudy环境下。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/1460947/1753346358919-e1e2b082-e8f7-4a71-9812-c1db7161e118.png" alt=""></p><p>对于纯静态的网站，就需要对前后端进行部署，推荐下面2种方案。</p><h3 id="_2-前后端docker" tabindex="-1"><a class="header-anchor" href="#_2-前后端docker"><span>2.前后端docker</span></a></h3><p>a.在项目根目录下，创建docker构建文件和忽略文件，如下。</p><p>Dockerfile内容：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># 使用 Node 22 官方镜像（基于 Debian）</span></span>
<span class="line">FROM node:22-bookworm</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 设置工作目录</span></span>
<span class="line">WORKDIR /app</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 1. 复制包管理文件</span></span>
<span class="line">COPY package.json package-lock.json ./</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 安装依赖（包含构建工具）</span></span>
<span class="line">RUN <span class="token function">npm</span> <span class="token function">install</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 复制其他文件</span></span>
<span class="line">COPY <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 构建应用</span></span>
<span class="line">RUN <span class="token function">npm</span> run build</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 暴露端口</span></span>
<span class="line">EXPOSE <span class="token number">3000</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 启动命令</span></span>
<span class="line">CMD <span class="token punctuation">[</span><span class="token string">&quot;node&quot;</span>, <span class="token string">&quot;.output/server/index.mjs&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>.dockerignore内容：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">node_modules</span>
<span class="line">.nuxt</span>
<span class="line">.output</span>
<span class="line">.DS_Store</span>
<span class="line">dist</span>
<span class="line">*.log</span>
<span class="line">.env</span>
<span class="line">.git</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>b.执行构建命令：一定要注意node版本，不然会报错！nuxt4.0要求node20+</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> build --no-cache <span class="token parameter variable">-t</span> nuxt-app <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>c.运行docker容器：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">3000</span>:3000 <span class="token parameter variable">-e</span> <span class="token assign-left variable">NUXT_PUBLIC_API_BASE</span><span class="token operator">=</span>your_api_url nuxt-app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-前后端pm2-node" tabindex="-1"><a class="header-anchor" href="#_3-前后端pm2-node"><span>3.前后端pm2 +node</span></a></h3><p>a.项目执行</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> run build</span>
<span class="line"><span class="token comment"># 或运行</span></span>
<span class="line">nuxt build</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>b.运行前端服务</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">node</span> .output/server/index.mjs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>c.全局安装PM2，并运行后端服务</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token comment"># 全局安装</span></span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> pm2</span>
<span class="line"><span class="token comment"># 运行后端服务</span></span>
<span class="line">pm2 start .output/server/index.mjs <span class="token parameter variable">--name</span> <span class="token string">&quot;nuxt-app&quot;</span></span>
<span class="line"><span class="token comment"># 保存当前进程列表,下面命令式服务器配置</span></span>
<span class="line">pm2 save</span>
<span class="line"><span class="token comment"># 开机唤醒进程</span></span>
<span class="line">pm2 startup</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2025/png/1460947/1753352436650-294a0125-db3e-40da-983b-e817ee5baf02.png" alt=""></p><h2 id="问题-怎么办" tabindex="-1"><a class="header-anchor" href="#问题-怎么办"><span>问题 - 怎么办？</span></a></h2>`,36)),a("h3",g,[a("a",b,[a("span",null,[s[42]||(s[42]=n("1.",-1)),p(e,{style:{color:"rgb(38, 38, 38)"}},{default:t(()=>s[41]||(s[41]=[n("为什么nuxt build之后前后端启动都指向了 .output/server/index.mjs？",-1)])),_:1,__:[41]})])])]),a("ul",null,[s[48]||(s[48]=a("li",null,"架构设计：全栈一体化。打包后，静态资源 - public ；服务端 - server",-1)),a("li",null,[s[47]||(s[47]=n("服务端渲染（SSR）工作流。在",-1)),p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[43]||(s[43]=[n("当访问任意路由时：请求首先到达index.mjs，该文件判断请求类型：",-1)])),_:1,__:[43]}),a("ul",null,[a("li",null,[p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[44]||(s[44]=[n("如果是静态资源 → 返回 .output/public 中的文件",-1)])),_:1,__:[44]})]),a("li",null,[p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[45]||(s[45]=[n("如果是 API 路由 → 执行对应的 API 处理器",-1)])),_:1,__:[45]})]),a("li",null,[p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[46]||(s[46]=[n("如果是页面路由 → 执行 Vue SSR 渲染",-1)])),_:1,__:[46]})])])])]),p(e,{style:{color:"rgb(64, 64, 64)"}}),p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[49]||(s[49]=[n("原理：",-1)])),_:1,__:[49]}),p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[50]||(s[50]=[n("Nuxt 3+ 使用 Nitro 作为服务端引擎：编译时会将 页面路由（",-1)])),_:1,__:[50]}),s[64]||(s[64]=n("`**",-1)),p(e,{style:{color:"rgb(64, 64, 64)","background-color":"rgb(236, 236, 236)"}},{default:t(()=>s[51]||(s[51]=[n("/pages/**",-1)])),_:1,__:[51]}),s[65]||(s[65]=n("**`",-1)),p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[52]||(s[52]=[n("）、服务端路由（",-1)])),_:1,__:[52]}),s[66]||(s[66]=n("`**",-1)),p(e,{style:{color:"rgb(64, 64, 64)","background-color":"rgb(236, 236, 236)"}},{default:t(()=>s[53]||(s[53]=[n("/server/api/**",-1)])),_:1,__:[53]}),s[67]||(s[67]=n("**`",-1)),p(e,{style:{color:"rgb(64, 64, 64)"}},{default:t(()=>s[54]||(s[54]=[n("）、服务端中间件都打包进index.mjs。以下是核心逻辑：",-1)])),_:1,__:[54]}),s[68]||(s[68]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 伪代码示意</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 1. 先尝试匹配API路由</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;/api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">handleAPIRequest</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 2. 再尝试返回静态文件</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">serveStaticAsset</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 3. 最后执行SSR渲染</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">renderSSRPage</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-如何全局引入css" tabindex="-1"><a class="header-anchor" href="#_2-如何全局引入css"><span>2.如何全局引入css？</span></a></h3><p>nuxt.config.ts 文件内，添加全局css配置：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&#39;@/assets/css/ui.css&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单页面应用，也可以在app.vue里面引入。</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/assets/css/first.css&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">// 或</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"></span>
<span class="line">  <span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;~/assets/css/second.css&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-如何全局引入插件-例如pinia" tabindex="-1"><a class="header-anchor" href="#_3-如何全局引入插件-例如pinia"><span>3.如何全局引入插件，例如pinia？</span></a></h3><p>npm安装插件</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">npm i pinia @pinia<span class="token operator">/</span>nuxt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>nuxt.config.ts 文件内，添加全局配置</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineNuxtConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;@pinia/nuxt&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11))])}const x=i(u,[["render",h]]),j=JSON.parse('{"path":"/mds/Nuxtjs%E4%BD%BF%E7%94%A8.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"简介 - 是什么？","slug":"简介-是什么","link":"#简介-是什么","children":[{"level":3,"title":"- SPA","slug":"spa","link":"#spa","children":[]},{"level":3,"title":"- MPA","slug":"mpa","link":"#mpa","children":[]}]},{"level":2,"title":"优势 - 为什么用？","slug":"优势-为什么用","link":"#优势-为什么用","children":[]},{"level":2,"title":"安装 - 如何用？","slug":"安装-如何用","link":"#安装-如何用","children":[{"level":3,"title":"1.components 定义组件","slug":"_1-components-定义组件","link":"#_1-components-定义组件","children":[]},{"level":3,"title":"2.pages 路由","slug":"_2-pages-路由","link":"#_2-pages-路由","children":[]},{"level":3,"title":"3.layout布局","slug":"_3-layout布局","link":"#_3-layout布局","children":[]},{"level":3,"title":"4.Store状态","slug":"_4-store状态","link":"#_4-store状态","children":[]},{"level":3,"title":"5.SEO优化","slug":"_5-seo优化","link":"#_5-seo优化","children":[]},{"level":3,"title":"6.server 服务端","slug":"_6-server-服务端","link":"#_6-server-服务端","children":[]},{"level":3,"title":"7.常用hook","slug":"_7-常用hook","link":"#_7-常用hook","children":[]}]},{"level":2,"title":"部署 - 如何部署","slug":"部署-如何部署","link":"#部署-如何部署","children":[{"level":3,"title":"1.纯静态网站","slug":"_1-纯静态网站","link":"#_1-纯静态网站","children":[]},{"level":3,"title":"2.前后端docker","slug":"_2-前后端docker","link":"#_2-前后端docker","children":[]},{"level":3,"title":"3.前后端pm2 +node","slug":"_3-前后端pm2-node","link":"#_3-前后端pm2-node","children":[]}]},{"level":2,"title":"问题 - 怎么办？","slug":"问题-怎么办","link":"#问题-怎么办","children":[{"level":3,"title":"1.为什么nuxt build之后前后端启动都指向了 .output/server/index.mjs？","slug":"_1-为什么nuxt-build之后前后端启动都指向了-output-server-index-mjs","link":"#_1-为什么nuxt-build之后前后端启动都指向了-output-server-index-mjs","children":[]},{"level":3,"title":"2.如何全局引入css？","slug":"_2-如何全局引入css","link":"#_2-如何全局引入css","children":[]},{"level":3,"title":"3.如何全局引入插件，例如pinia？","slug":"_3-如何全局引入插件-例如pinia","link":"#_3-如何全局引入插件-例如pinia","children":[]}]}],"git":{},"filePathRelative":"mds/Nuxtjs使用.md","excerpt":"<h2>简介 - 是什么？</h2>\\n<p>nuxtjs <strong></strong></p>\\n<a href=\\"https://nuxt.com/docs/4.x/getting-started/installation\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://nuxt.com/docs/4.x/getting-started/installation</a><h3>- SPA</h3>\\n<p>spa是单页面应用，又称客户端渲染CSR</p>\\n<h3>- MPA</h3>\\n<p>mpa是多页面应用，又称服务端渲染SSR</p>"}');export{x as comp,j as data};
