import{_ as s,c as a,b as p,o as e}from"./app-BI9Ul3hK.js";const t={};function c(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<p>官方地址：<a href="https://hammerjs.github.io/" target="_blank" rel="noopener noreferrer">https://hammerjs.github.io/</a></p><h2 id="hammerjs概述" tabindex="-1"><a class="header-anchor" href="#hammerjs概述"><span>hammerjs概述</span></a></h2><p>Hammer.js 是一个开源的、轻量级的触屏设备 JavaScript 手势库。它可以在不需要依赖其他工具或库的情况下识别触摸和鼠标事件，允许同时监听多个手势，甚至自定义识别器，并识别滑动方向。</p><p>特点：轻量级 | 跨平台兼容 |  简单易用 |  可扩展性强</p><h3 id="使用hammerjs" tabindex="-1"><a class="header-anchor" href="#使用hammerjs"><span>使用hammerjs</span></a></h3><h4 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h4><p><code>npm install hammerjs</code></p><h4 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入</span></a></h4><p><code>// 使用 CommonJS 语法（Node.js） const Hammer = require(&#39;hammerjs&#39;); // 或者使用 ES6 语法（例如，在模块化的前端项目中） import Hammer from &#39;hammerjs&#39;;</code></p><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h4><p><code>const manager = new Hammer(document.getElementById(&#39;element-id&#39;));</code></p><h4 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h4><h5 id="_1-轻击-tap-点击元素时" tabindex="-1"><a class="header-anchor" href="#_1-轻击-tap-点击元素时"><span>1.轻击（Tap）- 点击元素时</span></a></h5><p><code>manager.on(&#39;tap&#39;, (ev) =&gt; { console.log(&#39;Tap event&#39;, ev); });</code></p><h5 id="_2-双击-doubletap-轻击元素两次时触发" tabindex="-1"><a class="header-anchor" href="#_2-双击-doubletap-轻击元素两次时触发"><span>2.双击（Doubletap）- 轻击元素两次时触发</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">manager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;doubletap&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Doubletap event&#39;</span><span class="token punctuation">,</span> ev<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-滑动-swipe-元素上滑动手指时触发" tabindex="-1"><a class="header-anchor" href="#_3-滑动-swipe-元素上滑动手指时触发"><span>3.滑动（Swipe）- 元素上滑动手指时触发</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">manager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;swipe&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Swipe event&#39;</span><span class="token punctuation">,</span> ev<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>ev<span class="token punctuation">.</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">case</span> Hammer<span class="token punctuation">.</span><span class="token constant">DIRECTION_LEFT</span><span class="token operator">:</span>  </span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Swiped left&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">case</span> Hammer<span class="token punctuation">.</span><span class="token constant">DIRECTION_RIGHT</span><span class="token operator">:</span>  </span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Swiped right&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token comment">// 可以添加其他方向的处理...  </span></span>
<span class="line">  <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>SwipeLeft：向左滑动</li><li>Swiperight：向右滑动</li><li>Swipetup：向上滑动</li><li>Swipedown：向下滑动</li></ul><h4 id="_4-按压-press-长按超过500ms触发" tabindex="-1"><a class="header-anchor" href="#_4-按压-press-长按超过500ms触发"><span>4.按压（Press）- 长按超过500ms触发</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">manager<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;press&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Press event&#39;</span><span class="token punctuation">,</span> ev<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Pressup：点击事件离开时触发</li></ul><h4 id="自定义手势配置-改变滑动事件触发的阈值" tabindex="-1"><a class="header-anchor" href="#自定义手势配置-改变滑动事件触发的阈值"><span>自定义手势配置 - 改变滑动事件触发的阈值</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hammer</span><span class="token punctuation">(</span>myElement<span class="token punctuation">,</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token literal-property property">swipe_velocity</span><span class="token operator">:</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token comment">// 设置滑动速度阈值  </span></span>
<span class="line">  <span class="token literal-property property">swipe_max_touches</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 设置同时触摸的最大数量  </span></span>
<span class="line">  <span class="token comment">// 可以添加其他配置...  </span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="移除事件监听器-off" tabindex="-1"><a class="header-anchor" href="#移除事件监听器-off"><span>移除事件监听器 off</span></a></h4><p><code>manager.off(&#39;tap&#39;);</code></p><h4 id="监听多个事件类型-on" tabindex="-1"><a class="header-anchor" href="#监听多个事件类型-on"><span>监听多个事件类型 on</span></a></h4><p>使用空格分隔的方式来监听多个事件类型。在回调函数中，通过 event.type 属性来确定触发的是哪个事件。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> myElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;my-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">const</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hammer</span><span class="token punctuation">(</span>myElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">mc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;tap doubletap swipe press&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;tap&#39;</span><span class="token operator">:</span>  </span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Tap event triggered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;doubletap&#39;</span><span class="token operator">:</span>  </span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Double tap event triggered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;swipe&#39;</span><span class="token operator">:</span>  </span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Swipe event triggered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">      <span class="token comment">// 你可以根据swipe的方向做进一步处理  </span></span>
<span class="line">      <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">        <span class="token keyword">case</span> Hammer<span class="token punctuation">.</span><span class="token constant">DIRECTION_LEFT</span><span class="token operator">:</span>  </span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Swiped left&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">          <span class="token keyword">break</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">case</span> Hammer<span class="token punctuation">.</span><span class="token constant">DIRECTION_RIGHT</span><span class="token operator">:</span>  </span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Swiped right&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">          <span class="token keyword">break</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token comment">// 其他方向...  </span></span>
<span class="line">      <span class="token punctuation">}</span>  </span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">case</span> <span class="token string">&#39;press&#39;</span><span class="token operator">:</span>  </span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Press event triggered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token comment">// 其他事件类型...  </span></span>
<span class="line">  <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-识别双指缩放-pinch-两个手指在元素上执行缩放动作时触发" tabindex="-1"><a class="header-anchor" href="#_5-识别双指缩放-pinch-两个手指在元素上执行缩放动作时触发"><span>5.识别双指缩放（pinch）- 两个手指在元素上执行缩放动作时触发</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> myElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;my-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">const</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hammer</span><span class="token punctuation">(</span>myElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">mc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;pinch&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token keyword">const</span> scale <span class="token operator">=</span> event<span class="token punctuation">.</span>scale<span class="token punctuation">;</span> <span class="token comment">// 缩放的比例，初始值为1，放大时大于1，缩小时小于1  </span></span>
<span class="line">  <span class="token keyword">const</span> isPinchingIn <span class="token operator">=</span> scale <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 判断是向内缩放还是向外缩放  </span></span>
<span class="line">  </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Pinch event triggered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Scale:&#39;</span><span class="token punctuation">,</span> scale<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Pinching in:&#39;</span><span class="token punctuation">,</span> isPinchingIn<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 根据缩放比例执行相应的逻辑，比如调整元素的大小或位置  </span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>isPinchingIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// 处理向内缩放的逻辑  </span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token comment">// 处理向外缩放的逻辑  </span></span>
<span class="line">  <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pinch事件，两根手指（默认为两根手指，多指触控需要单独设置）或多根手指相对移动或相向移动的事件</p><ul><li>Pinchstart：多点触控开始</li><li>Pinchmove：多点触控过程</li><li>Pinchend：多点触控结束</li><li>Pinchcancel：多点触控取消</li><li>Pinchn：多点触控时两手指距离越来越近</li><li>Pinchout：多点触控时两手指距离越来越远</li></ul><h4 id="_6-识别旋转-rotate-用两个或多个手指在元素上执行旋转动作时触发" tabindex="-1"><a class="header-anchor" href="#_6-识别旋转-rotate-用两个或多个手指在元素上执行旋转动作时触发"><span>6.识别旋转（rotate）- 用两个或多个手指在元素上执行旋转动作时触发</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> myElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;my-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token keyword">const</span> mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hammer</span><span class="token punctuation">(</span>myElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">mc<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;rotate&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token keyword">const</span> angle <span class="token operator">=</span> event<span class="token punctuation">.</span>angle<span class="token punctuation">;</span> <span class="token comment">// 旋转的角度（以度为单位）  </span></span>
<span class="line">  <span class="token keyword">const</span> isClockwise <span class="token operator">=</span> angle <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 判断是顺时针旋转还是逆时针旋转  </span></span>
<span class="line">  </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Rotate event triggered&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Angle:&#39;</span><span class="token punctuation">,</span> angle<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Clockwise:&#39;</span><span class="token punctuation">,</span> isClockwise<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 根据旋转角度执行相应的逻辑，比如调整元素的旋转状态  </span></span>
<span class="line">  <span class="token comment">// 例如，如果你使用的是CSS transforms，你可以这样更新元素的旋转：  </span></span>
<span class="line">  myElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">rotate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>angle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">deg)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Hammer.js 还提供了 rotate的拆解方法</p><ul><li>rotatestart 旋转开始</li><li>rotatemove 旋转过程中</li><li>rotateend 旋转结束</li><li>rotatecancel 旋转取消</li></ul><h4 id="_7-屏幕拖动事件-pan" tabindex="-1"><a class="header-anchor" href="#_7-屏幕拖动事件-pan"><span>7.屏幕拖动事件（Pan）</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">hammertime<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;pan&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Panstart：拖动开始</li><li>Panmove：拖动过程</li><li>Panend：拖动结束</li><li>Pancancel：拖动取消</li><li>Panleft：向左拖动</li><li>Panright：向右拖动</li><li>Panup：向上拖动</li><li>Pandown：向下拖动</li></ul>`,40)]))}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/mds/hammerjs%20%E6%89%8B%E5%8A%BF%E6%8F%92%E4%BB%B6.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"hammerjs概述","slug":"hammerjs概述","link":"#hammerjs概述","children":[{"level":3,"title":"使用hammerjs","slug":"使用hammerjs","link":"#使用hammerjs","children":[]}]}],"git":{},"filePathRelative":"mds/hammerjs 手势插件.md","excerpt":"<p>官方地址：<a href=\\"https://hammerjs.github.io/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://hammerjs.github.io/</a></p>\\n<h2>hammerjs概述</h2>\\n<p>Hammer.js 是一个开源的、轻量级的触屏设备 JavaScript 手势库。它可以在不需要依赖其他工具或库的情况下识别触摸和鼠标事件，允许同时监听多个手势，甚至自定义识别器，并识别滑动方向。</p>\\n<p>特点：轻量级 | 跨平台兼容 | &nbsp;简单易用 | &nbsp;可扩展性强</p>\\n<h3>使用hammerjs</h3>"}');export{i as comp,u as data};
