import{_ as i,o as s,c as l,a as e}from"./app-C8QvFSbi.js";const a={},n=e('<h3 id="_1-xss-攻击-及防护" tabindex="-1"><a class="header-anchor" href="#_1-xss-攻击-及防护"><span>1.XSS 攻击 及防护</span></a></h3><h4 id="什么是xss" tabindex="-1"><a class="header-anchor" href="#什么是xss"><span>什么是xss?</span></a></h4><p>Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种<strong>代码注入攻击</strong>。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。</p><h4 id="xss常见注入方法" tabindex="-1"><a class="header-anchor" href="#xss常见注入方法"><span>XSS常见注入方法</span></a></h4><ul><li><p>在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入。</p></li><li><p>在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）。</p></li><li><p>在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签。</p></li><li><p>在标签的 href、src 等属性中，包含 <code>javascript:</code> (伪协议)等可执行代码。</p></li><li><p>在 onload、onerror、onclick 等事件中，注入不受控制代码。</p></li><li><p>在 style 属性和标签中，包含类似 <code>background-image:url(&quot;javascript:...&quot;);</code> 的代码（新版本浏览器已经可以防范）。</p></li><li><p>在 style 属性和标签中，包含类似 <code>expression(...)</code> 的 CSS 表达式代码（新版本浏览器已经可以防范）。</p></li></ul><h4 id="xss攻击类型" tabindex="-1"><a class="header-anchor" href="#xss攻击类型"><span>XSS攻击类型</span></a></h4><p>根据攻击的来源，分为存储型、反射型和 DOM 型三种</p><ul><li>存储型 ，恶意代码被注入到数据库中，打开网站时从数据库携带出，并被浏览器执行，从而实现恶意代码窃取用户数据攻击网站的效果。</li><li>反射性 ，恶意代码被隐藏在url路径中，当用户打开链接时，代码被拼接到浏览器中执行，最后实现攻击网站窃取数据。</li><li>DOM型，恶意代码隐藏在前端、url、后端数据库，当DOM被解析执行时暴漏出来，开始攻击。</li></ul><h4 id="防御xss方法" tabindex="-1"><a class="header-anchor" href="#防御xss方法"><span>防御XSS方法</span></a></h4><ul><li>输入框录入时数据校验，限制长度</li><li>输入框录入时过滤JavaScript 特殊字段</li><li>过滤不必要的事件：onclick,onerror,onfoucs</li><li>对渲染内容编码转义</li><li>将cookie设置成 http only</li></ul><h3 id="_2-csrf-跨站请求伪造" tabindex="-1"><a class="header-anchor" href="#_2-csrf-跨站请求伪造"><span>2.CSRF 跨站请求伪造</span></a></h3><h4 id="什么是csrf" tabindex="-1"><a class="header-anchor" href="#什么是csrf"><span>什么是CSRF?</span></a></h4><p>跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。</p><p>要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p><ul><li>1.登录受信任网站A，并在本地生成Cookie。</li><li>2.在不登出A的情况下，访问危险网站B。</li></ul><h4 id="csrf常见攻击类型" tabindex="-1"><a class="header-anchor" href="#csrf常见攻击类型"><span>CSRF常见攻击类型</span></a></h4><ul><li>Get请求，数据被拼在get请求的url中</li><li>Post请求，页面会自动提交表单，将数据提交到危险网站</li><li>链接，通过夸张的关键字，点击之后将数据携带到危险网站</li></ul><h4 id="防御csrf方法" tabindex="-1"><a class="header-anchor" href="#防御csrf方法"><span>防御CSRF方法</span></a></h4><ul><li>新增验证码，提交数据需要输入验证码</li><li>请求来源限制</li><li>token，验证token是最佳CSRF的防御方案</li></ul>',19),r=[n];function c(o,t){return s(),l("div",null,r)}const h=i(a,[["render",c],["__file","网络安全.html.vue"]]),d=JSON.parse('{"path":"/guide/JavaScript/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"1.XSS 攻击 及防护","slug":"_1-xss-攻击-及防护","link":"#_1-xss-攻击-及防护","children":[]},{"level":3,"title":"2.CSRF 跨站请求伪造","slug":"_2-csrf-跨站请求伪造","link":"#_2-csrf-跨站请求伪造","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"guide/JavaScript/网络安全.md","excerpt":"<h3>1.XSS 攻击 及防护</h3>\\n<h4>什么是xss?</h4>\\n<p>Cross-Site Scripting（跨站脚本攻击）简称 XSS，是一种<strong>代码注入攻击</strong>。攻击者通过在目标网站上注入恶意脚本，使之在用户的浏览器上运行。利用这些恶意脚本，攻击者可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。</p>\\n<h4>XSS常见注入方法</h4>\\n<ul>\\n<li>\\n<p>在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入。</p>\\n</li>\\n<li>\\n<p>在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）。</p>\\n</li>\\n<li>\\n<p>在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签。</p>\\n</li>\\n<li>\\n<p>在标签的 href、src 等属性中，包含 <code>javascript:</code> (伪协议)等可执行代码。</p>\\n</li>\\n<li>\\n<p>在 onload、onerror、onclick 等事件中，注入不受控制代码。</p>\\n</li>\\n<li>\\n<p>在 style 属性和标签中，包含类似 <code>background-image:url(\\"javascript:...\\");</code> 的代码（新版本浏览器已经可以防范）。</p>\\n</li>\\n<li>\\n<p>在 style 属性和标签中，包含类似 <code>expression(...)</code> 的 CSS 表达式代码（新版本浏览器已经可以防范）。</p>\\n</li>\\n</ul>"}');export{h as comp,d as data};
