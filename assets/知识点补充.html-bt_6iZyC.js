import{_ as o,c as i,b as l,d as s,a as p,e as a,w as e,r as c,o as u}from"./app-Tsm6EGXP.js";const r={},d={id:"_2-web-workers",tabindex:"-1"},k={class:"header-anchor",href:"#_2-web-workers"},v={id:"_8-window-performance-timing-在浏览器的地址栏中输入一个域名并按下回车键后发生了什么",tabindex:"-1"},m={class:"header-anchor",href:"#_8-window-performance-timing-在浏览器的地址栏中输入一个域名并按下回车键后发生了什么"},b={id:"在浏览器的地址栏中输入一个域名并按下回车键后发生了什么",tabindex:"-1"},g={class:"header-anchor",href:"#在浏览器的地址栏中输入一个域名并按下回车键后发生了什么"},f={id:"reflect-get-obj-key-this-取值",tabindex:"-1"},y={class:"header-anchor",href:"#reflect-get-obj-key-this-取值"},w={id:"reflect-set-obj-key-value-赋值",tabindex:"-1"},j={class:"header-anchor",href:"#reflect-set-obj-key-value-赋值"},x={id:"_11-proxy",tabindex:"-1"},_={class:"header-anchor",href:"#_11-proxy"},h={id:"函数原型-prototype",tabindex:"-1"},S={class:"header-anchor",href:"#函数原型-prototype"},q={id:"对象属性-原型访问器-proto",tabindex:"-1"},A={class:"header-anchor",href:"#对象属性-原型访问器-proto"},P={id:"原型链-prototype-chain",tabindex:"-1"},D={class:"header-anchor",href:"#原型链-prototype-chain"},E={id:"this指向",tabindex:"-1"},F={class:"header-anchor",href:"#this指向"},W={id:"修改this指向",tabindex:"-1"},R={class:"header-anchor",href:"#修改this指向"},O={id:"共享状态及生命周期",tabindex:"-1"},T={class:"header-anchor",href:"#共享状态及生命周期"},C={id:"混入合并规则",tabindex:"-1"},M={class:"header-anchor",href:"#混入合并规则"},L={id:"_17-vue2-响应式数组有哪些限制-如何解决这些限制",tabindex:"-1"},B={class:"header-anchor",href:"#_17-vue2-响应式数组有哪些限制-如何解决这些限制"},H={id:"_18-canvas绘制的图形模糊有锯齿如何解决",tabindex:"-1"},I={class:"header-anchor",href:"#_18-canvas绘制的图形模糊有锯齿如何解决"},V={id:"_19-abortcontroller控制器对象",tabindex:"-1"},N={class:"header-anchor",href:"#_19-abortcontroller控制器对象"},J={id:"_21-vue子页面如何阻止父路由跳转",tabindex:"-1"},z={class:"header-anchor",href:"#_21-vue子页面如何阻止父路由跳转"},$={id:"_24-performance-和-new-date-的区别",tabindex:"-1"},U={class:"header-anchor",href:"#_24-performance-和-new-date-的区别"};function K(G,n){const t=c("font");return u(),i("div",null,[n[180]||(n[180]=l(`<h3 id="_1-websocket" tabindex="-1"><a class="header-anchor" href="#_1-websocket"><span>1.WebSocket</span></a></h3><p>WebSocket可以发送文本，也可以发送二进制数据（blob对象或Arraybuffer对象）</p><p>WebSocket没有同源限制，客户端可以与任意服务器通信。</p><p>WebSocket协议标识符是ws（握手http）（如果加密，则为wss（tcp +TLS)），服务器网址就是 URL。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 创建 WebSocket 实例，连接到服务器</span></span>
<span class="line"><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 监听连接建立事件</span></span>
<span class="line">socket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket 连接已建立&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 监听服务器发送的消息事件</span></span>
<span class="line">socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;收到服务器消息: &#39;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 监听连接关闭事件</span></span>
<span class="line">socket<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket 连接已关闭&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 监听错误事件</span></span>
<span class="line">socket<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket 发生错误: &#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> sendMessageButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;sendMessage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">sendMessageButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>readyState <span class="token operator">===</span> WebSocket<span class="token punctuation">.</span><span class="token constant">OPEN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 向服务器发送消息</span></span>
<span class="line">    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, server!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5)),s("h3",d,[s("a",k,[s("span",null,[n[1]||(n[1]=a("2.",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[0]||(n[0]=[a("Web Workers",-1)])),_:1,__:[0]})])])]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[2]||(n[2]=[a("Web Workers 是HTML5引入的重要特性，它允许 JavaScript 在后台线程中运行，而不会阻塞主线程（UI 线程）渲染。",-1)])),_:1,__:[2]}),s("p",null,[s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[3]||(n[3]=[a("使用场景",-1)])),_:1,__:[3]})]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[4]||(n[4]=[a("：",-1)])),_:1,__:[4]})]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[5]||(n[5]=[a("解决传统js单线程运行机制，渲染页面时遇到大量耗时计算处理导致页面卡顿。",-1)])),_:1,__:[5]}),s("p",null,[s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[6]||(n[6]=[a("特点",-1)])),_:1,__:[6]})]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[7]||(n[7]=[a("：",-1)])),_:1,__:[7]})]),s("ul",null,[s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[8]||(n[8]=[a("运行在后台线程中，与主线程隔离。",-1)])),_:1,__:[8]})]),s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[9]||(n[9]=[a("不可以直接操作 DOM",-1)])),_:1,__:[9]})]),s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[10]||(n[10]=[a("可以通过消息传递机制与主线程通信",-1)])),_:1,__:[10]})])]),s("p",null,[s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[11]||(n[11]=[a("类型",-1)])),_:1,__:[11]})]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[12]||(n[12]=[a("：",-1)])),_:1,__:[12]})]),n[181]||(n[181]=s("ul",null,[s("li",null,"专用 Worker，单个页面使用"),s("li",null,"共享 Worker，多个页面公用")],-1)),s("p",null,[s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[13]||(n[13]=[a("使用",-1)])),_:1,__:[13]})]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[14]||(n[14]=[a("：",-1)])),_:1,__:[14]})]),s("ul",null,[s("li",null,[s("strong",null,[p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[15]||(n[15]=[a("创建 new Worker()",-1)])),_:1,__:[15]})])]),s("li",null,[s("strong",null,[p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[16]||(n[16]=[a("发消息 postMessage()",-1)])),_:1,__:[16]})])]),s("li",null,[s("strong",null,[p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[17]||(n[17]=[a("接收消息 onmessage()",-1)])),_:1,__:[17]})])]),s("li",null,[s("strong",null,[p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[18]||(n[18]=[a("终止 terminate()",-1)])),_:1,__:[18]})])])]),n[182]||(n[182]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// worker.js</span></span>
<span class="line"><span class="token comment">// 监听主线程发送的消息</span></span>
<span class="line">self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 获取主线程发送的数据</span></span>
<span class="line">    <span class="token keyword">const</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 进行一些耗时的计算</span></span>
<span class="line">    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        result <span class="token operator">+=</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 将计算结果发送回主线程</span></span>
<span class="line">    self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Web Worker Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>startWorker<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Start Worker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">      <span class="token keyword">const</span> startWorkerButton <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;startWorker&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      startWorkerButton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建一个新的 Worker 实例</span></span>
<span class="line">        <span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;worker.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 向 Worker 发送数据</span></span>
<span class="line">        worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 监听 Worker 发送回来的消息</span></span>
<span class="line">        worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">const</span> result <span class="token operator">=</span> event<span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line">          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;计算结果: &#39;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token comment">// 任务完成后终止 Worker</span></span>
<span class="line">          worker<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-concat" tabindex="-1"><a class="header-anchor" href="#_3-concat"><span>3.concat</span></a></h3><p>Array.concat(arr) 用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> array2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> array4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;f&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> array5 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> array6 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>array2<span class="token punctuation">,</span> array4<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，concat还可以往数组里面添加单个数据，例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">const</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment">// [1,2,5,10]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-reduce" tabindex="-1"><a class="header-anchor" href="#_4-reduce"><span>4.reduce</span></a></h3><p>Array.reduce(callback,initval) 用于数组求和/乘积/去重/扁平数组</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 扁平数组</span></span>
<span class="line"><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>  </span>
<span class="line"><span class="token comment">// 求和</span></span>
<span class="line"><span class="token keyword">let</span> sum <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> pre <span class="token operator">+</span> cur</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 乘积</span></span>
<span class="line"><span class="token keyword">let</span> slu <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> pre <span class="token operator">*</span> cur</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>slu<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 去重</span></span>
<span class="line"><span class="token keyword">let</span> slus <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span>cur</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pre<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> pre</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-vue-react都是单页面应用-如何做ssr" tabindex="-1"><a class="header-anchor" href="#_5-vue-react都是单页面应用-如何做ssr"><span>5.vue/react都是单页面应用，如何做ssr</span></a></h3>`,11)),s("p",null,[n[21]||(n[21]=a("v",-1)),p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[19]||(n[19]=[a("u",-1)])),_:1,__:[19]}),n[22]||(n[22]=a("e 使用脚手架 n",-1)),p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[20]||(n[20]=[a("u",-1)])),_:1,__:[20]}),n[23]||(n[23]=a("xt.js",-1))]),s("p",null,[n[26]||(n[26]=a("r",-1)),p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[24]||(n[24]=[a("e",-1)])),_:1,__:[24]}),n[27]||(n[27]=a("act 使用脚手架 n",-1)),p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[25]||(n[25]=[a("e",-1)])),_:1,__:[25]}),n[28]||(n[28]=a("xt.js",-1))]),n[183]||(n[183]=l(`<p><img src="https://cdn.nlark.com/yuque/0/2024/svg/1460947/1723169760501-330b5cbc-01e8-4d78-a5f0-3129cd62d67b.svg" alt=""></p><h3 id="_6-js修改css-变量的值" tabindex="-1"><a class="header-anchor" href="#_6-js修改css-变量的值"><span>6.js修改css 变量的值</span></a></h3><p>setProperty用来修改自定义属性</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">box<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&#39;--mainColor&#39;</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_7-spa单页面应用首屏加载慢优化方案" tabindex="-1"><a class="header-anchor" href="#_7-spa单页面应用首屏加载慢优化方案"><span>7.SPA单页面应用首屏加载慢优化方案</span></a></h3><p><strong>a.网络性能优化</strong></p>`,6)),s("p",null,[n[30]||(n[30]=a("a1.",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[29]||(n[29]=[a("减少HTTP请求，合并css/js文件",-1)])),_:1,__:[29]})]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[31]||(n[31]=[a(" a2.css使用图片精灵",-1)])),_:1,__:[31]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[32]||(n[32]=[a(" a3.启用gzip压缩",-1)])),_:1,__:[32]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[33]||(n[33]=[a(" a4.使用cdn加速",-1)])),_:1,__:[33]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[34]||(n[34]=[a(" a5.懒加载",-1)])),_:1,__:[34]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[35]||(n[35]=[a(" a6.开启浏览器缓存",-1)])),_:1,__:[35]}),s("p",null,[s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[36]||(n[36]=[a("b.代码优化",-1)])),_:1,__:[36]})])]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[37]||(n[37]=[a(" b1.组件按需加载",-1)])),_:1,__:[37]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[38]||(n[38]=[a(" b2.打包优化，JS/css/img等资源进行压缩",-1)])),_:1,__:[38]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[39]||(n[39]=[a(" b3.优化代码，减少重排和重绘",-1)])),_:1,__:[39]}),s("p",null,[s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[40]||(n[40]=[a("c.改用SSR方案，服务端渲染。",-1)])),_:1,__:[40]})])]),s("h3",v,[s("a",m,[s("span",null,[n[42]||(n[42]=a("8.Window.performance.timing(",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[41]||(n[41]=[a("在浏览器的地址栏中输入一个域名并按下回车键后发生了什么？）",-1)])),_:1,__:[41]})])])]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[43]||(n[43]=[a(" window.performance.timing 是一个性能接口，它提供了一种方式来获取详细的页面加载时间信息。",-1)])),_:1,__:[43]}),n[184]||(n[184]=l('<p><img src="https://cdn.nlark.com/yuque/0/2024/png/1460947/1734160521263-aa8c29e5-a581-42a2-a746-38eb18754042.png" alt=""></p><ul><li>navigationStart：用户开始导航到页面的时间（例如，点击链接、提交表单等）。</li><li>redirectStart 和 redirectEnd：如果存在重定向，这两个属性分别表示重定向开始和结束的时间。</li><li>fetchStart：浏览器准备好使用HTTP请求获取文档资源的时间。</li><li>domainLookupStart 和 domainLookupEnd：DNS查询开始和结束的时间。</li><li>connectStart 和 connectEnd：TCP连接建立开始和结束的时间（包括TLS握手时间，如果有）。</li><li>secureConnectionStart：TLS握手开始的时间（仅适用于HTTPS页面）。</li><li>requestStart：浏览器发出HTTP请求的时间。</li><li>responseStart 和 responseEnd：服务器开始和完成响应的时间。</li><li>domLoading：浏览器开始解析DOM的时间。</li><li>domInteractive：浏览器完成解析DOM的时间，但可能还有未加载的子资源（如图片、样式表）。</li><li>domContentLoadedEventStart 和 domContentLoadedEventEnd：DOMContentLoaded 事件触发的开始和结束时间。</li><li>domComplete：所有资源都已加载完成的时间。</li><li>loadEventStart 和 loadEventEnd：load 事件触发的开始和结束时间。</li></ul>',2)),s("h4",b,[s("a",g,[s("span",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[44]||(n[44]=[a("在浏览器的地址栏中输入一个域名并按下回车键后发生了什么？",-1)])),_:1,__:[44]})])])]),n[185]||(n[185]=l('<p><img src="https://cdn.nlark.com/yuque/0/2024/png/1460947/1734161835437-55a6ba70-21d0-4592-aad7-0164c51275e0.png" alt=""></p><p><strong>TCP连接三次握手：</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1460947/1734163147377-7b99ed25-0020-40a8-ae2a-94b1bc60f83c.png" alt=""></p><p><strong>TLS/SSR握手：</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1460947/1734164257192-860592c8-d729-4216-b9c1-bbab922fd557.png" alt=""></p><p><strong>浏览器渲染页面流程：</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1460947/1734169125334-2d615755-144a-415a-ae7f-e1da5755f684.png" alt=""></p><ul><li>回流（位置、尺寸，窗口改变等，另外获取offsetTop|clientWidth|scrollTop等属性也会导致回流）改变了布局，一定会造成重绘；</li><li>重绘（颜色，阴影，位移-tranform）不一定产生回流。</li></ul><p><strong>事件循环：</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1460947/1734165837195-1bbd5a71-051d-43e9-829e-e9d2ce0d7d13.png" alt=""></p><h3 id="_9-border绘制三角形的原理" tabindex="-1"><a class="header-anchor" href="#_9-border绘制三角形的原理"><span>9.border绘制三角形的原理</span></a></h3><p>给4个边分别不通色的，增加border宽度会发现四周并不是矩形，而是梯形；继续加大边框，梯形面积越来越多，中心区域越来越小；当足够大时，4个边框变成了三角形。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/1460947/1734170049526-bf5319df-2abd-4ac0-aa7e-24e0fe9000a2.png" alt=""></p><p>最后需要那个方向的三角，就将另外三个边颜色设置成透明色。</p><h3 id="_10-reflect" tabindex="-1"><a class="header-anchor" href="#_10-reflect"><span>10.Reflect</span></a></h3>',15)),s("p",null,[n[48]||(n[48]=a("reflect是ES6引入内置对象，",-1)),p(t,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:e(()=>n[45]||(n[45]=[a("设计目的是将对象的操作方法进行标准化，并提供一种更安全、更灵活的方式来操作对象。一句话：",-1)])),_:1,__:[45]}),s("strong",null,[p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[46]||(n[46]=[a("调用对象的基本方法（内部操作）",-1)])),_:1,__:[46]})]),p(t,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:e(()=>n[47]||(n[47]=[a("。",-1)])),_:1,__:[47]})]),s("h5",f,[s("a",y,[s("span",null,[p(t,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:e(()=>n[49]||(n[49]=[a("Reflect.get(obj,key,this）- 取值",-1)])),_:1,__:[49]})])])]),n[186]||(n[186]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("h5",w,[s("a",j,[s("span",null,[p(t,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:e(()=>n[50]||(n[50]=[a("Reflect.set(obj,key,value）- 赋值",-1)])),_:1,__:[50]})])])]),n[187]||(n[187]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 等同于赋值 obj.a = 2</span></span>
<span class="line">Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="reflect-has-target-目标对象-key-检查属性是否存在" tabindex="-1"><a class="header-anchor" href="#reflect-has-target-目标对象-key-检查属性是否存在"><span>Reflect.has(target-目标对象, key) - 检查属性是否存在</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">Reflect<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="reflect-apply-targetfn-目标函数-thisarg-this指向-arglist-实参-apply改变指向" tabindex="-1"><a class="header-anchor" href="#reflect-apply-targetfn-目标函数-thisarg-this指向-arglist-实参-apply改变指向"><span>Reflect.apply(targetFn-目标函数, thisArg-this指向, argList-实参) - apply改变指向</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">Reflect</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>floor<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1.75</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="reflect-ownkeys-target-返回目标属性组成的数组" tabindex="-1"><a class="header-anchor" href="#reflect-ownkeys-target-返回目标属性组成的数组"><span>Reflect.ownKeys(target) - 返回目标属性组成的数组</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ &quot;z&quot;, &quot;y&quot;, &quot;x&quot; ]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="reflect-getprototypeof-target-返回对象的原型" tabindex="-1"><a class="header-anchor" href="#reflect-getprototypeof-target-返回对象的原型"><span>Reflect.getPrototypeOf(target) - 返回对象的原型</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Object.prototype</span></span>
<span class="line">Reflect<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="reflect-setprototypeof-设置对象的原型-并返回操作结果-true-false" tabindex="-1"><a class="header-anchor" href="#reflect-setprototypeof-设置对象的原型-并返回操作结果-true-false"><span>Reflect.setPrototypeOf() - 设置对象的原型，并返回操作结果（true/false）</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">Reflect<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="reflect-isextensible-target-判断对象是否可扩展-返回布尔值" tabindex="-1"><a class="header-anchor" href="#reflect-isextensible-target-判断对象是否可扩展-返回布尔值"><span>Reflect.isExtensible(target) - 判断对象是否可扩展，返回布尔值</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="reflect-preventextensions-target-设置对象不可扩展" tabindex="-1"><a class="header-anchor" href="#reflect-preventextensions-target-设置对象不可扩展"><span>Reflect.preventExtensions(target) - 设置对象不可扩展</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">Reflect<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>object1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="reflect-defineproperty-target-对象-key-属性-attributes-属性描述-添加修改对象的数下-返回执行结果-true-false" tabindex="-1"><a class="header-anchor" href="#reflect-defineproperty-target-对象-key-属性-attributes-属性描述-添加修改对象的数下-返回执行结果-true-false"><span>Reflect.defineProperty(target-对象, key-属性, attributes-属性描述) - 添加修改对象的数下，返回执行结果（true/false）</span></a></h5><p>同Object.defineProperty</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">Reflect<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="reflect-deleteproperty-target-对象-key-删除对象属性-返回操作结果-true-false" tabindex="-1"><a class="header-anchor" href="#reflect-deleteproperty-target-对象-key-删除对象属性-返回操作结果-true-false"><span>Reflect.deleteProperty(target-对象, key) - 删除对象属性，返回操作结果（true/false）</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// {y:2}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="reflect-getownpropertydescriptor-target-key-获取对象属性描述" tabindex="-1"><a class="header-anchor" href="#reflect-getownpropertydescriptor-target-key-获取对象属性描述"><span>Reflect.getOwnPropertyDescriptor(target, key) - 获取对象属性描述</span></a></h5><p>同Object.getOwnPropertyDescriptor()</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">Reflect<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token comment">// {value: &quot;hello&quot;, writable: true, enumerable: true, configurable: true}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,23)),s("h3",x,[s("a",_,[s("span",null,[n[52]||(n[52]=a("11.",-1)),p(t,{style:{color:"rgb(27, 27, 27)"}},{default:e(()=>n[51]||(n[51]=[a("Proxy",-1)])),_:1,__:[51]})])])]),p(t,{style:{color:"rgb(27, 27, 27)"}},{default:e(()=>n[53]||(n[53]=[a("Proxy",-1)])),_:1,__:[53]}),p(t,{style:{color:"rgb(27, 27, 27)"}},{default:e(()=>n[54]||(n[54]=[a("创建一个对象的代理, 从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。",-1)])),_:1,__:[54]}),n[188]||(n[188]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>target<span class="token operator">-</span>对象<span class="token punctuation">,</span> handler<span class="token operator">-</span>代理操作<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代理操作支持Reflect的全部子方法（同9），如果代理操作没有重写的方法，就走对象自身的方法。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">//代理对象</span></span>
<span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 代理方法</span></span>
<span class="line"><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> key <span class="token keyword">in</span> target <span class="token operator">?</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token comment">// set/has.....</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span> obj<span class="token punctuation">,</span> handler<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">p<span class="token punctuation">.</span>a  <span class="token comment">// 1</span></span>
<span class="line">p<span class="token punctuation">.</span>b  <span class="token comment">// 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-怪异模式下盒子模型" tabindex="-1"><a class="header-anchor" href="#_12-怪异模式下盒子模型"><span>12.怪异模式下盒子模型</span></a></h3>`,4)),s("p",null,[n[56]||(n[56]=a("怪异盒子（非标准盒子模型），渲染一些老旧浏览器的兼容模式。",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[55]||(n[55]=[a("在怪异模式下，宽度和高度包括内容区域、内边距和边框：",-1)])),_:1,__:[55]})]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[57]||(n[57]=[a("例如：",-1)])),_:1,__:[57]}),n[189]||(n[189]=l(`<div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx"><pre><code><span class="line">内容宽度 <span class="token operator">=</span> 内容区域 <span class="token operator">+</span> 左右padding之和 <span class="token operator">+</span> 左右border<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1)),s("p",null,[n[59]||(n[59]=a("另外，只要html开头是**",-1)),p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[58]||(n[58]=[a("非“”",-1)])),_:1,__:[58]}),n[60]||(n[60]=a("**的都会进入怪异模式（兼容模式）。换句话说，写错或少写html开头都是怪异模式产生的原因。",-1))]),n[190]||(n[190]=l(`<p><strong>标准模型：内容区域是独立的！</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/1460947/1739328931097-87b0bb81-35c1-4381-9c51-509bc8847511.png" alt=""></p><p>标准盒子模型转换成怪异盒子模型：</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code><span class="line"><span class="token selector">div</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">box-sizing</span><span class="token punctuation">:</span>border-box<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-伪类和伪元素区别" tabindex="-1"><a class="header-anchor" href="#_13-伪类和伪元素区别"><span>13.伪类和伪元素区别</span></a></h3><p>伪类是用于元素添加交互状态，如：“:hover”、“:active”、“:foucs”等。</p><p>伪元素是用于不添加html标签，用css创造一个“假”元素，如：“::before”、“::after”。</p><h3 id="_14-原型及原型链" tabindex="-1"><a class="header-anchor" href="#_14-原型及原型链"><span>14.原型及原型链</span></a></h3>`,8)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[61]||(n[61]=[a("JS的原型和原型链是其面向对象编程的核心机制之一，用于实现继承和共享属性或方法。",-1)])),_:1,__:[61]}),s("h4",h,[s("a",S,[s("span",null,[n[63]||(n[63]=a("函数原型",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[62]||(n[62]=[a("（Prototype）",-1)])),_:1,__:[62]})])])]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[64]||(n[64]=[a("原型：每个",-1)])),_:1,__:[64]}),n[191]||(n[191]=a("**",-1)),p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[65]||(n[65]=[a("函数",-1)])),_:1,__:[65]}),n[192]||(n[192]=a("**",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[66]||(n[66]=[a("都有一个 prototype 属性，指向一个对象（这个对象就是函数的原型）。",-1)])),_:1,__:[66]}),n[193]||(n[193]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">person1<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, my name is Alice</span></span>
<span class="line">person2<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, my name is Bob</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("ul",null,[s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[67]||(n[67]=[a("Person.prototype 是所有通过 new Person() 创建的实例对象的",-1)])),_:1,__:[67]}),n[70]||(n[70]=a("**",-1)),p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[68]||(n[68]=[a("原型",-1)])),_:1,__:[68]}),n[71]||(n[71]=a("**",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[69]||(n[69]=[a("。",-1)])),_:1,__:[69]})]),s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[72]||(n[72]=[a("原型上定义的方法和属性，所有实例共享共有。",-1)])),_:1,__:[72]})])]),s("h4",q,[s("a",A,[s("span",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[73]||(n[73]=[a("对象属性-原型访问器（",-1)])),_:1,__:[73]}),p(t,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:e(()=>n[74]||(n[74]=[s("strong",null,"proto",-1)])),_:1,__:[74]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[75]||(n[75]=[a("）",-1)])),_:1,__:[75]})])])]),n[194]||(n[194]=l(`<p>每个对象都有一个属性[[Prototype]]，它指向当前对象的原型。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">person1<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> person2<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Person</span><span class="token punctuation">.</span>prototype   <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2)),s("ul",null,[s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[76]||(n[76]=[a("“__proto__”可以用来获取对象的原型，ES6新增 Object.getPrototypeOf()方法获取对象的原型。",-1)])),_:1,__:[76]})]),s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[77]||(n[77]=[a("“__proto__”还可以用来修改对象的原型，ES6新增 Object.setPrototypeOf()方法设置对象的原型。",-1)])),_:1,__:[77]})])]),s("h4",P,[s("a",D,[s("span",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[78]||(n[78]=[a("原型链（",-1)])),_:1,__:[78]}),s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[79]||(n[79]=[a("Prototype Chain",-1)])),_:1,__:[79]})]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[80]||(n[80]=[a("）",-1)])),_:1,__:[80]})])])]),s("p",null,[s("strong",null,[p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[81]||(n[81]=[a("多个原型对象组成的继承链式，被成为原型链",-1)])),_:1,__:[81]})]),n[82]||(n[82]=a("。",-1))]),n[195]||(n[195]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Eating...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bark</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Barking...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> myDog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">myDog<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Barking...</span></span>
<span class="line">myDog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Eating...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[84]||(n[84]=a("以下是案例的方法属性查找**",-1)),p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[83]||(n[83]=[a("过程生成的原型链",-1)])),_:1,__:[83]}),n[85]||(n[85]=a("**：",-1))]),n[196]||(n[196]=s("ul",null,[s("li",null,"myDog 的原型是 Dog.prototype。"),s("li",null,"Dog.prototype 的原型是 Animal.prototype。"),s("li",null,"Animal.prototype 的原型是 Object.prototype。"),s("li",null,"Object.prototype 的原型是 null，这是原型链的终点。")],-1)),n[197]||(n[197]=s("h3",{id:"_15-函数上下文-this",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_15-函数上下文-this"},[s("span",null,"15.函数上下文（this）")])],-1)),p(t,{style:{color:"rgb(25, 27, 31)"}},{default:e(()=>n[86]||(n[86]=[a("this关键字在JavaScript中表示当前",-1)])),_:1,__:[86]}),n[198]||(n[198]=a("**",-1)),p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[87]||(n[87]=[a("执行上下文的对象",-1)])),_:1,__:[87]}),n[199]||(n[199]=a("**",-1)),p(t,{style:{color:"rgb(25, 27, 31)"}},{default:e(()=>n[88]||(n[88]=[a("。",-1)])),_:1,__:[88]}),s("h4",E,[s("a",F,[s("span",null,[p(t,{style:{color:"rgb(25, 27, 31)"}},{default:e(()=>n[89]||(n[89]=[a("this指向",-1)])),_:1,__:[89]})])])]),n[200]||(n[200]=s("ul",null,[s("li",null,"浏览器环境全局作用域中，指向window；"),s("li",null,[a("函数中，this的指向取决于函数的调用方式（ "),s("ol",null,[s("li",null,"显式绑定：可以使用call、apply或者bind方法强制指定this的指向"),s("li",null,"隐式绑定：当函数作为对象的方法被调用时，this指向该对象"),s("li",null,"new绑定：使用new来调用一个构造函数时，this指向新创建的对象")])])],-1)),n[201]||(n[201]=s("p",null,"）",-1)),n[202]||(n[202]=s("ul",null,[s("li",null,"箭头函数不提供this，有箭头函数外层决定this指向。")],-1)),s("h4",W,[s("a",R,[s("span",null,[p(t,{style:{color:"rgb(25, 27, 31)"}},{default:e(()=>n[90]||(n[90]=[a("修改this指向",-1)])),_:1,__:[90]})])])]),n[203]||(n[203]=l(`<p>call、apply 和 bind 是 JavaScript 中用于改变函数执行上下文（即 this 指向）的三个重要方法。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token punctuation">[</span>argsArray<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span>color <span class="token operator">=</span> <span class="token string">&#39;White&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old. I like </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Bind&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Call&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">66</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Apply&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sayHi</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">sayHi</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> <span class="token string">&quot;Red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">sayHi</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj3<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;Blue&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三者对比：</p>`,3)),s("table",null,[s("thead",null,[s("tr",null,[s("th",null,[s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[91]||(n[91]=[a("方法",-1)])),_:1,__:[91]})])]),s("th",null,[s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[92]||(n[92]=[a("是否立即执行",-1)])),_:1,__:[92]})])]),s("th",null,[s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[93]||(n[93]=[a("参数形式",-1)])),_:1,__:[93]})])]),s("th",null,[s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[94]||(n[94]=[a("返回值",-1)])),_:1,__:[94]})])])])]),s("tbody",null,[s("tr",null,[n[98]||(n[98]=s("td",null,"call",-1)),s("td",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[95]||(n[95]=[a("是",-1)])),_:1,__:[95]})]),s("td",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[96]||(n[96]=[a("列表形式传递参数",-1)])),_:1,__:[96]})]),s("td",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[97]||(n[97]=[a("函数执行结果",-1)])),_:1,__:[97]})])]),s("tr",null,[n[102]||(n[102]=s("td",null,"apply",-1)),s("td",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[99]||(n[99]=[a("是",-1)])),_:1,__:[99]})]),s("td",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[100]||(n[100]=[a("数组形式传递参数",-1)])),_:1,__:[100]})]),s("td",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[101]||(n[101]=[a("函数执行结果",-1)])),_:1,__:[101]})])]),s("tr",null,[n[108]||(n[108]=s("td",null,"bind",-1)),s("td",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[103]||(n[103]=[a("否",-1)])),_:1,__:[103]})]),s("td",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[104]||(n[104]=[a("列表形式传递参数",-1)])),_:1,__:[104]})]),s("td",null,[s("strong",null,[p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[105]||(n[105]=[a("返回一个绑定了this",-1)])),_:1,__:[105]})]),n[107]||(n[107]=s("br",null,null,-1)),s("strong",null,[p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[106]||(n[106]=[a(" 的新函数",-1)])),_:1,__:[106]})])])])])]),n[204]||(n[204]=s("p",null,"应用场景：",-1)),n[205]||(n[205]=s("ul",null,[s("li",null,"call 和 apply：实现继承，让子类可以调用父类的构造函数。"),s("li",null,"bind：为事件处理函数绑定特定的 this 值。")],-1)),n[206]||(n[206]=s("h3",{id:"_16-vue混入mixin",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_16-vue混入mixin"},[s("span",null,"16.vue混入Mixin")])],-1)),s("p",null,[n[110]||(n[110]=a("vue的混入mixin是一种",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[109]||(n[109]=[a("代码复用机制。将数据，逻辑，函数相同的代码抽离，多个组件共享共用混入的代码功能。Vue2里面的选项API都可以用来共享，实现代码的复用。",-1)])),_:1,__:[109]})]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[111]||(n[111]=[a("优点：可以提高代码的可维护性和复用性",-1)])),_:1,__:[111]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[112]||(n[112]=[a("缺点：",-1)])),_:1,__:[112]}),s("ul",null,[s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[113]||(n[113]=[a("1.避免命名冲突；",-1)])),_:1,__:[113]})]),s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[114]||(n[114]=[a("2.尽量少用Mixin，不便于维护。",-1)])),_:1,__:[114]})])]),n[207]||(n[207]=l(`<h4 id="共享逻辑" tabindex="-1"><a class="header-anchor" href="#共享逻辑"><span>共享逻辑</span></a></h4><p>将共用的函数抽离，多组件共同使用。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 定义一个 mixin</span></span>
<span class="line"><span class="token keyword">const</span> sharedMethods <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[LOG]: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 mixin 的组件</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>sharedMethods<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">showToday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token string">&#39;今天是：&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s("h4",O,[s("a",T,[s("span",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[115]||(n[115]=[a("共享状态及生命周期",-1)])),_:1,__:[115]})])])]),n[208]||(n[208]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 定义一个 mixin</span></span>
<span class="line"><span class="token keyword">const</span> mapMixin <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">mapInstance</span><span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>mapInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapLibrary<span class="token punctuation">.</span>Map</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>mapContainer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>mapInstance<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 mixin 的组件</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">mixins</span><span class="token operator">:</span> <span class="token punctuation">[</span>mapMixin<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div ref=&quot;mapContainer&quot;&gt;&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p(t,{style:{color:"rgb(44, 44, 54)"}}),s("h4",C,[s("a",M,[s("span",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[116]||(n[116]=[a("混入合并规则",-1)])),_:1,__:[116]})])])]),n[209]||(n[209]=s("ul",null,[s("li",null,"生命周期钩子，先执行mixin里面钩子，再执行组件的钩子；"),s("li",null,"methods选项函数重名，组件函数会覆盖mixin的函数；"),s("li",null,"data属性重名，组件会覆盖mixin的属性；")],-1)),s("h3",L,[s("a",B,[s("span",null,[n[118]||(n[118]=a("17.vue2**",-1)),p(t,{style:{color:"rgb(25, 27, 31)"}},{default:e(()=>n[117]||(n[117]=[a("响应式数组有哪些限制？如何解决这些限制？",-1)])),_:1,__:[117]}),n[119]||(n[119]=a("**",-1))])])]),n[210]||(n[210]=s("p",null,[s("strong",null,"主要限制"),a("：")],-1)),s("ul",null,[s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[120]||(n[120]=[a("通过",-1)])),_:1,__:[120]}),p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[121]||(n[121]=[a("索引修改数组元素",-1)])),_:1,__:[121]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[122]||(n[122]=[a("，无法",-1)])),_:1,__:[122]}),p(t,{style:{color:"rgb(64, 64, 64)"}},{default:e(()=>n[123]||(n[123]=[a("检测变化-不会更新视图",-1)])),_:1,__:[123]})]),s("li",null,[p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[124]||(n[124]=[a("新增数组对象的属性",-1)])),_:1,__:[124]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[125]||(n[125]=[a("时",-1)])),_:1,__:[125]}),n[129]||(n[129]=a("**",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[126]||(n[126]=[a("，",-1)])),_:1,__:[126]}),n[130]||(n[130]=a("**",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[127]||(n[127]=[a("无法",-1)])),_:1,__:[127]}),p(t,{style:{color:"rgb(64, 64, 64)"}},{default:e(()=>n[128]||(n[128]=[a("检测变化-不会更新视图",-1)])),_:1,__:[128]})]),s("li",null,[p(t,{style:{color:"rgb(64, 64, 64)"}},{default:e(()=>n[131]||(n[131]=[a("修改",-1)])),_:1,__:[131]}),p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[132]||(n[132]=[a("数组长度",-1)])),_:1,__:[132]}),p(t,{style:{color:"rgb(64, 64, 64)"}},{default:e(()=>n[133]||(n[133]=[a("时，",-1)])),_:1,__:[133]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[134]||(n[134]=[a("无法",-1)])),_:1,__:[134]}),p(t,{style:{color:"rgb(64, 64, 64)"}},{default:e(()=>n[135]||(n[135]=[a("检测变化-不会更新视图",-1)])),_:1,__:[135]})])]),s("p",null,[s("strong",null,[p(t,{style:{color:"#000000"}},{default:e(()=>n[136]||(n[136]=[a("解决方案：",-1)])),_:1,__:[136]})])]),n[211]||(n[211]=s("ul",null,[s("li",null,"使用vue提供的数组变异方法：push(), pop(), shift(), unshift(), splice(), sort(), reverse()。"),s("li",null,"替换整个数组，强制刷新。"),s("li",null,"使用 Vue.set 或 vm.$set修改数组中对象属性。"),s("li",null,"使用splice 更改数组长度。")],-1)),p(t,{style:{color:"rgb(64, 64, 64)"}}),s("h3",H,[s("a",I,[s("span",null,[p(t,{style:{color:"rgb(64, 64, 64)"}},{default:e(()=>n[137]||(n[137]=[a("18.canvas绘制的图形模糊有锯齿如何解决？",-1)])),_:1,__:[137]})])])]),n[212]||(n[212]=s("p",null,"高分辨率设备（如 Retina 显示屏）上使用 canvas 时，由于设备的物理像素密度较高，Canvas 的默认绘图可能会显得模糊。",-1)),s("p",null,[n[140]||(n[140]=a("解决方案：采用",-1)),n[141]||(n[141]=s("strong",null,"原始尺寸",-1)),n[142]||(n[142]=a(" ** * ** ",-1)),s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[138]||(n[138]=[a("设备的像素比 ",-1)])),_:1,__:[138]})]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[139]||(n[139]=[a("然后使用canvas缩放上下文恢复正常尺寸。",-1)])),_:1,__:[139]})]),n[213]||(n[213]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 设置 Canvas 的逻辑尺寸（CSS 尺寸）</span></span>
<span class="line"><span class="token keyword">const</span> logicalWidth <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑宽度</span></span>
<span class="line"><span class="token keyword">const</span> logicalHeight <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span> <span class="token comment">// 逻辑高度</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 设置 Canvas 的实际分辨率</span></span>
<span class="line">canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> logicalWidth <span class="token operator">*</span> dpr<span class="token punctuation">;</span></span>
<span class="line">canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> logicalHeight <span class="token operator">*</span> dpr<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 缩放绘图上下文</span></span>
<span class="line">ctx<span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>dpr<span class="token punctuation">,</span> dpr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("h3",V,[s("a",N,[s("span",null,[n[144]||(n[144]=a("19.",-1)),p(t,{style:{color:"#080808","background-color":"#ffffff"}},{default:e(()=>n[143]||(n[143]=[a("AbortController控制器对象",-1)])),_:1,__:[143]})])])]),p(t,{style:{color:"#080808","background-color":"#ffffff"}},{default:e(()=>n[145]||(n[145]=[a("AbortController 是一个控制器对象，允许开发者主动终止一个或多个 Web 请求或异步任务。",-1)])),_:1,__:[145]}),n[214]||(n[214]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> signal <span class="token punctuation">}</span> <span class="token operator">=</span> controller<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p(t,{style:{color:"#080808","background-color":"#ffffff"}},{default:e(()=>n[146]||(n[146]=[a("new AbortController实例化后返回一个AbortController类对象，仅有一个属性signal，该属性是一个AbortSignal对象，该对象有一个属性aborted，表示是否已终止,是否已经调用过abort()方法。",-1)])),_:1,__:[146]}),n[215]||(n[215]=s("p",null,[s("img",{src:"https://cdn.nlark.com/yuque/0/2025/jpeg/1460947/1745204257296-5223f730-a430-4294-8bc2-12fb357803a0.jpeg",alt:""})],-1)),p(t,{style:{color:"#080808","background-color":"#ffffff"}},{default:e(()=>n[147]||(n[147]=[a("用途一： 终止请求",-1)])),_:1,__:[147]}),n[216]||(n[216]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> signal <span class="token punctuation">}</span> <span class="token operator">=</span> controller<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://api.example.com/data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> signal <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;AbortError&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;请求已取消&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 中止请求</span></span>
<span class="line">controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),p(t,{style:{color:"#080808","background-color":"#ffffff"}},{default:e(()=>n[148]||(n[148]=[a("用途二： 终止监听事件",-1)])),_:1,__:[148]}),n[217]||(n[217]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 旧方案：</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 新方案：</span></span>
<span class="line"><span class="token keyword">const</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbortController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;resize&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> controller<span class="token punctuation">.</span>signal <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 通过. abort() 方法移除事件处理函数</span></span>
<span class="line">controller<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-babel-js-的用途" tabindex="-1"><a class="header-anchor" href="#_20-babel-js-的用途"><span>20.babel.js 的用途</span></a></h3>`,2)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[149]||(n[149]=[a("Babel 是一个广泛使用的 JavaScript 编译器，可以将ES6的新特性（箭头函数、解构赋值、类等）转换为低版本浏览器支持的ES5语法，也可以实现jsx等语法的预编译。",-1)])),_:1,__:[149]}),s("ul",null,[s("li",null,[s("strong",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[150]||(n[150]=[a("ES6语法转换，提高代码的兼容性。",-1)])),_:1,__:[150]})])]),s("li",null,[s("strong",null,[p(t,{style:{color:"rgb(26, 32, 41)"}},{default:e(()=>n[151]||(n[151]=[a("支持 polyfill库，跨浏览器兼容",-1)])),_:1,__:[151]})])]),s("li",null,[s("strong",null,[p(t,{style:{color:"rgb(0, 0, 0) !important"}},{default:e(()=>n[152]||(n[152]=[a("支持 JSX 和 TypeScript 等自定义",-1)])),_:1,__:[152]}),n[154]||(n[154]=a("****",-1)),p(t,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:e(()=>n[153]||(n[153]=[a("转换规则",-1)])),_:1,__:[153]})])])]),s("p",null,[s("strong",null,[p(t,{style:{color:"rgba(0, 0, 0, 0.85)"}})])]),s("h3",J,[s("a",z,[s("span",null,[p(t,{style:{color:"rgba(0, 0, 0, 0.85)"}},{default:e(()=>n[155]||(n[155]=[a("21.vue子页面如何阻止父路由跳转？",-1)])),_:1,__:[155]})])])]),n[218]||(n[218]=s("p",null,"在后台开发中，停留子页面时候，如何点了全局的路由跳转，如何拦截？",-1)),s("p",null,[n[157]||(n[157]=a("答案：子页面使用 **",-1)),p(t,{style:{color:"#117CEE"}},{default:e(()=>n[156]||(n[156]=[a("beforeRouteLeave",-1)])),_:1,__:[156]}),n[158]||(n[158]=a("****",-1)),p(t,{style:{color:"#DF2A3F"}}),n[159]||(n[159]=a("**钩子捕获。",-1))]),n[219]||(n[219]=l(`<div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue"><pre><code><span class="line">beforeRouteLeave(to, from, next) {</span>
<span class="line">  const answer = window.confirm(&#39;确定离开已编辑的页面吗？此操作不可恢复。&#39;);</span>
<span class="line">  if (answer) {</span>
<span class="line">    next();</span>
<span class="line">  } else {</span>
<span class="line">    next(false);</span>
<span class="line">  }</span>
<span class="line">},</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_22-promise-all接收的参数是什么" tabindex="-1"><a class="header-anchor" href="#_22-promise-all接收的参数是什么"><span>22.Promise.all接收的参数是什么？</span></a></h3>`,2)),s("p",null,[n[161]||(n[161]=a("Promise.all( [ p1, p2 ] ) ",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[160]||(n[160]=[a("接收一个 Promise 可迭代对象（如数组），并返回一个新的 Promise。",-1)])),_:1,__:[160]})]),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[162]||(n[162]=[a("当传入的参数是普通函数或没有返回的函数，如同给Promise.all( [ undefined, undefined ] )，那么它会立即执行all的回调then。",-1)])),_:1,__:[162]}),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[163]||(n[163]=[a("因此，使用Promise.all时一定要保证传入的参数是个",-1)])),_:1,__:[163]}),n[220]||(n[220]=a("**",-1)),p(t,{style:{color:"#117CEE"}},{default:e(()=>n[164]||(n[164]=[a("Promise对象",-1)])),_:1,__:[164]}),n[221]||(n[221]=a("**",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[165]||(n[165]=[a("。",-1)])),_:1,__:[165]}),n[222]||(n[222]=l(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> p3 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Alice&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [3, &quot;foo&quot;, { name: &#39;Alice&#39; }]</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-vue3有哪些新特性" tabindex="-1"><a class="header-anchor" href="#_23-vue3有哪些新特性"><span>23.Vue3有哪些新特性？</span></a></h3><p>vue3相比于vue2x版本，主要体现在 “更快，更小，更便于维护”。</p><h4 id="对比差异" tabindex="-1"><a class="header-anchor" href="#对比差异"><span>对比差异</span></a></h4><ul><li><p><strong>更快</strong></p><pre><code>更快体现在源码的改动：重构**&lt;font style=&quot;color:#2F4BDA;&quot;&gt;虚拟DOM&lt;/font&gt;**、**&lt;font style=&quot;color:#2F4BDA;&quot;&gt;事件缓存&lt;/font&gt;**、基于**&lt;font style=&quot;color:#2F4BDA;&quot;&gt;Proxy的响应式对象&lt;/font&gt;**。
</code></pre><ol><li>虚拟DOM，通过diff算法，只更新改变的部分，其余静态内容就地复用，减少资源浪费。</li><li>事件缓存，通过事件缓存对象cacheHandlers缓存事件，事件再次触发不再重新生成函数。</li><li>响应式对象，利用ES 6的Proxy API来实现数据劫持，不再进行递归遍历劫持数据。</li></ol></li><li><p><strong>更小</strong></p><pre><code>更小是指vue3打包后的资源更小。主要依赖ES6的**&lt;font style=&quot;color:#7E45E8;&quot;&gt;静态结构特性，未引用的代码不参与打包&lt;/font&gt;**，因此更小。
</code></pre></li><li><p><strong>更便于维护</strong></p><pre><code>便于维护也体现在源码，引入了**&lt;font style=&quot;color:#07787E;&quot;&gt;TypeScript、重构了源码目录&lt;/font&gt;**等。
</code></pre></li></ul><h4 id="新特性" tabindex="-1"><a class="header-anchor" href="#新特性"><span>新特性</span></a></h4><ul><li><strong>组合式API</strong></li></ul><p>vue2 基于配置的组件写法称为Options API（配置式API） , Composition API（组合式API）通过setup语法糖进行自由组合。</p>`,8)),s("ul",null,[s("li",null,[n[168]||(n[168]=s("strong",null,"新增内置组件 Teleport 、Suspense 、Fragments片段等",-1)),s("ol",null,[s("li",null,[n[167]||(n[167]=a("Teleport ",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[166]||(n[166]=[a("脱离当前组件，适用于模态框、提示框等场景。",-1)])),_:1,__:[166]})])])])]),n[223]||(n[223]=l(`<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code><span class="line">&lt;teleport to=<span class="token string">&quot;body&quot;</span>&gt;</span>
<span class="line">  &lt;div class=<span class="token string">&quot;modal&quot;</span>&gt;</span>
<span class="line">    &lt;p&gt;这是一个模态框&lt;/p&gt;</span>
<span class="line">  &lt;/div&gt;</span>
<span class="line">&lt;/teleport&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>2. Suspense &lt;font style=&quot;color:rgb(44, 44, 54);&quot;&gt;处理异步依赖的组件树。适用于懒加载等场景。&lt;/font&gt;
</code></pre><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css"><pre><code><span class="line"> &lt;Suspense&gt;</span>
<span class="line">    &lt;!-- 默认插槽：要等待的内容 --&gt;</span>
<span class="line">    &lt;template #default&gt;</span>
<span class="line">      &lt;AsyncComponent /&gt;</span>
<span class="line">    &lt;/template&gt;</span>
<span class="line"></span>
<span class="line">    &lt;!-- fallback 插槽：加载时显示的内容 --&gt;</span>
<span class="line">    &lt;template #fallback&gt;</span>
<span class="line">      &lt;div&gt;加载中，请稍候...&lt;/div&gt;</span>
<span class="line">    &lt;/template&gt;</span>
<span class="line">  &lt;/Suspense&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>3. Fragments   不再用在template中强制包裹一个根元素。 
</code></pre><ul><li><strong>服务端渲染</strong></li></ul><p>vue3优化了返回html的逻辑，更利于SEO。</p><h4 id="vite" tabindex="-1"><a class="header-anchor" href="#vite"><span>Vite</span></a></h4><p>Vue团队也推出了自己的开发构建工具Vite，特性：快速的冷启动、模块热更新、 按需编译。</p>`,8)),s("h3",$,[s("a",U,[s("span",null,[n[170]||(n[170]=a("24.",-1)),p(t,{style:{color:"rgb(63, 63, 63)","background-color":"rgb(224, 223, 255)"}},{default:e(()=>n[169]||(n[169]=[a("Performance 和 new Date() 的区别？",-1)])),_:1,__:[169]})])])]),s("ul",null,[s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[171]||(n[171]=[a("new Date() 用来获取",-1)])),_:1,__:[171]}),n[174]||(n[174]=a("**",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[172]||(n[172]=[a("具体",-1)])),_:1,__:[172]}),n[175]||(n[175]=a("**",-1)),p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[173]||(n[173]=[a("的日期和时间，包括年、月、日、小时、分钟、秒和毫秒。",-1)])),_:1,__:[173]})]),s("li",null,[p(t,{style:{color:"rgb(44, 44, 54)"}},{default:e(()=>n[176]||(n[176]=[a("performance.now() 用来精确测量执行时间，同时避免系统时钟干扰（微秒级别）。",-1)])),_:1,__:[176]})])]),n[224]||(n[224]=l(`<p>特点：微妙级别更精准、不受时钟影响（更适合测量时间间隔）</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 获取基准时间（navigationStart 时间点）</span></span>
<span class="line"><span class="token keyword">const</span> navigationStart <span class="token operator">=</span> performance<span class="token punctuation">.</span>timing<span class="token punctuation">.</span>navigationStart<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取从 navigationStart 开始的高精度时间差（毫秒）</span></span>
<span class="line"><span class="token keyword">const</span> duration <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 计算出对应的真实时间戳</span></span>
<span class="line"><span class="token keyword">const</span> realTimestamp <span class="token operator">=</span> navigationStart <span class="token operator">+</span> duration<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 转换成可读的日期时间</span></span>
<span class="line"><span class="token keyword">const</span> realDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>realTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;真实时间：&quot;</span><span class="token punctuation">,</span> realDate<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_25-addeventlistener-的第三个参数" tabindex="-1"><a class="header-anchor" href="#_25-addeventlistener-的第三个参数"><span>25.addEventListener 的第三个参数</span></a></h3><p>监听器的第三个参数，用来管理监听执行时是否是冒泡，捕获，或者一次性监听等。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">Dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> params <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>eventType ，常见事件类型：click, hover, keydown...</li><li>handler ，回调函数</li><li>params ， 用来判断是捕获还是冒泡，默认是冒泡 - false; once - 只执行一次 ; passive - 承诺此事件监听不会调用 preventDefault，这有助于性能。传once和passive时，必须是字符串。</li></ul><h3 id="_26-nexttick是什么" tabindex="-1"><a class="header-anchor" href="#_26-nexttick是什么"><span>26.NextTick是什么？</span></a></h3><p>当数据发生变化时，Vue 并不会立即更新 DOM，而是将这些变化放入一个队列中，并在同一事件循环结束后统一进行更新。不然，假设数据改变100次就要去更新100次DOM，是非浪费性能！</p>`,8)),s("p",null,[n[178]||(n[178]=a("nexttick 的作用就是 ",-1)),s("strong",null,[p(t,{style:{color:"#DF2A3F"}},{default:e(()=>n[177]||(n[177]=[a("将多次数据更新合并成一次，减少操作DOM的次数",-1)])),_:1,__:[177]})]),n[179]||(n[179]=a("。",-1))]),s("p",null,[s("strong",null,[p(t,{style:{color:"#DF2A3F"}})])])])}const Y=o(r,[["render",K]]),Q=JSON.parse(`{"path":"/mds/%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"1.WebSocket","slug":"_1-websocket","link":"#_1-websocket","children":[]},{"level":3,"title":"2.Web Workers","slug":"_2-web-workers","link":"#_2-web-workers","children":[]},{"level":3,"title":"3.concat","slug":"_3-concat","link":"#_3-concat","children":[]},{"level":3,"title":"4.reduce","slug":"_4-reduce","link":"#_4-reduce","children":[]},{"level":3,"title":"5.vue/react都是单页面应用，如何做ssr","slug":"_5-vue-react都是单页面应用-如何做ssr","link":"#_5-vue-react都是单页面应用-如何做ssr","children":[]},{"level":3,"title":"6.js修改css 变量的值","slug":"_6-js修改css-变量的值","link":"#_6-js修改css-变量的值","children":[]},{"level":3,"title":"7.SPA单页面应用首屏加载慢优化方案","slug":"_7-spa单页面应用首屏加载慢优化方案","link":"#_7-spa单页面应用首屏加载慢优化方案","children":[]},{"level":3,"title":"8.Window.performance.timing(在浏览器的地址栏中输入一个域名并按下回车键后发生了什么？）","slug":"_8-window-performance-timing-在浏览器的地址栏中输入一个域名并按下回车键后发生了什么","link":"#_8-window-performance-timing-在浏览器的地址栏中输入一个域名并按下回车键后发生了什么","children":[]},{"level":3,"title":"9.border绘制三角形的原理","slug":"_9-border绘制三角形的原理","link":"#_9-border绘制三角形的原理","children":[]},{"level":3,"title":"10.Reflect","slug":"_10-reflect","link":"#_10-reflect","children":[]},{"level":3,"title":"11.Proxy","slug":"_11-proxy","link":"#_11-proxy","children":[]},{"level":3,"title":"12.怪异模式下盒子模型","slug":"_12-怪异模式下盒子模型","link":"#_12-怪异模式下盒子模型","children":[]},{"level":3,"title":"13.伪类和伪元素区别","slug":"_13-伪类和伪元素区别","link":"#_13-伪类和伪元素区别","children":[]},{"level":3,"title":"14.原型及原型链","slug":"_14-原型及原型链","link":"#_14-原型及原型链","children":[]},{"level":3,"title":"15.函数上下文（this）","slug":"_15-函数上下文-this","link":"#_15-函数上下文-this","children":[]},{"level":3,"title":"16.vue混入Mixin","slug":"_16-vue混入mixin","link":"#_16-vue混入mixin","children":[]},{"level":3,"title":"17.vue2**响应式数组有哪些限制？如何解决这些限制？**","slug":"_17-vue2-响应式数组有哪些限制-如何解决这些限制","link":"#_17-vue2-响应式数组有哪些限制-如何解决这些限制","children":[]},{"level":3,"title":"18.canvas绘制的图形模糊有锯齿如何解决？","slug":"_18-canvas绘制的图形模糊有锯齿如何解决","link":"#_18-canvas绘制的图形模糊有锯齿如何解决","children":[]},{"level":3,"title":"19.AbortController控制器对象","slug":"_19-abortcontroller控制器对象","link":"#_19-abortcontroller控制器对象","children":[]},{"level":3,"title":"20.babel.js 的用途","slug":"_20-babel-js-的用途","link":"#_20-babel-js-的用途","children":[]},{"level":3,"title":"21.vue子页面如何阻止父路由跳转？","slug":"_21-vue子页面如何阻止父路由跳转","link":"#_21-vue子页面如何阻止父路由跳转","children":[]},{"level":3,"title":"22.Promise.all接收的参数是什么？","slug":"_22-promise-all接收的参数是什么","link":"#_22-promise-all接收的参数是什么","children":[]},{"level":3,"title":"23.Vue3有哪些新特性？","slug":"_23-vue3有哪些新特性","link":"#_23-vue3有哪些新特性","children":[]},{"level":3,"title":"24.Performance 和 new Date() 的区别？","slug":"_24-performance-和-new-date-的区别","link":"#_24-performance-和-new-date-的区别","children":[]},{"level":3,"title":"25.addEventListener 的第三个参数","slug":"_25-addeventlistener-的第三个参数","link":"#_25-addeventlistener-的第三个参数","children":[]},{"level":3,"title":"26.NextTick是什么？","slug":"_26-nexttick是什么","link":"#_26-nexttick是什么","children":[]}],"git":{},"filePathRelative":"mds/知识点补充.md","excerpt":"<h3>1.WebSocket</h3>\\n<p>WebSocket可以发送文本，也可以发送二进制数据（blob对象或Arraybuffer对象）</p>\\n<p>WebSocket没有同源限制，客户端可以与任意服务器通信。</p>\\n<p>WebSocket协议标识符是ws（握手http）（如果加密，则为wss（tcp +TLS)），服务器网址就是 URL。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\"><pre><code><span class=\\"line\\"><span class=\\"token comment\\">// 创建 WebSocket 实例，连接到服务器</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">const</span> socket <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">WebSocket</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'ws://*'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 监听连接建立事件</span></span>\\n<span class=\\"line\\">socket<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onopen</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'WebSocket 连接已建立'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 监听服务器发送的消息事件</span></span>\\n<span class=\\"line\\">socket<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onmessage</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">event</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'收到服务器消息: '</span><span class=\\"token punctuation\\">,</span> event<span class=\\"token punctuation\\">.</span>data<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 监听连接关闭事件</span></span>\\n<span class=\\"line\\">socket<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onclose</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'WebSocket 连接已关闭'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">// 监听错误事件</span></span>\\n<span class=\\"line\\">socket<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">onerror</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">error</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'WebSocket 发生错误: '</span><span class=\\"token punctuation\\">,</span> error<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">const</span> sendMessageButton <span class=\\"token operator\\">=</span> document<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getElementById</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'sendMessage'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">sendMessageButton<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">addEventListener</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'click'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>socket<span class=\\"token punctuation\\">.</span>readyState <span class=\\"token operator\\">===</span> WebSocket<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">OPEN</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token comment\\">// 向服务器发送消息</span></span>\\n<span class=\\"line\\">    socket<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">send</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">'Hello, server!'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{Y as comp,Q as data};
