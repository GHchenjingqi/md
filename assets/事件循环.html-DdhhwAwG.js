import{_ as a,o as e,c as p,a as n}from"./app-jHvIG5Zx.js";const s={},l=n('<h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环"><span>事件循环</span></a></h2><h3 id="_1-进程和线程" tabindex="-1"><a class="header-anchor" href="#_1-进程和线程"><span>1.进程和线程</span></a></h3><h4 id="什么是进程" tabindex="-1"><a class="header-anchor" href="#什么是进程"><span>什么是进程？</span></a></h4><p>程序运行需要有它自己专属的内存空间，可以把这块内存空间简单的理解为进程。</p><h4 id="什么是线程" tabindex="-1"><a class="header-anchor" href="#什么是线程"><span>什么是线程？</span></a></h4><p>一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为主线程。</p><h3 id="_2-浏览器进程" tabindex="-1"><a class="header-anchor" href="#_2-浏览器进程"><span>2.浏览器进程</span></a></h3><p>浏览器启动之后，会自动多个进程。</p><p>浏览器进程主要有三部分组成：<strong>浏览器进程，网络进程，渲染进程。</strong></p><ul><li><p>浏览器进程 ，主要负责界面显示，用户交互，子进程管理等。浏览器进程内部会启动多个线程处理不同的任务</p></li><li><p>网络进程，负责加载网络资源。网络进程内部启动多个线程来处理不同的网络任务。</p></li><li><p>渲染进程，启动之后会启动一个渲染主线程，负责执行 HTML/CSS/JS代码。</p><p>默认情况下，浏览器会为每个标签页开启一个渲染进程，保证不同标签页之间互不影响。</p></li></ul><p>渲染进程主要处理以下内容：解析HTML/CSS，计算样式和布局，执行js代码等。</p><p>渲染进程为了解决同一时间的事件冲突提出了排队—— <strong>消息队列（事件队列</strong>）。</p><ul><li><p>浏览器启动，渲染主线程会进入一个无限循环。</p></li><li><p>渲染主线程会每次从消息队列去一个任务去执行，执行完成之后，再拿下一个任务。直到任务处理完进入休眠状态。</p></li><li><p>其他线程随时添加新任务到消息队列尾部。如果主线程处于休眠状态就先唤醒继续循环拿任务。</p></li></ul><p><strong>整个渲染主线程处理任务的过程，被称作事件循环。</strong></p><h3 id="_3-什么是异步" tabindex="-1"><a class="header-anchor" href="#_3-什么是异步"><span>3.什么是异步？</span></a></h3><p>代码在执行的过程中，会遇到不能立即执行的任务，例如计时器（setTimeout)，网络请求(xhr,fetch)，监听事件（addEventListener)。为了不阻塞渲染进程，浏览器采用了异步的方法解决问题。</p><h4 id="单线程是异步产生的原因" tabindex="-1"><a class="header-anchor" href="#单线程是异步产生的原因"><span>单线程是异步产生的原因</span></a></h4><blockquote><h6 id="如何理解js的异步" tabindex="-1"><a class="header-anchor" href="#如何理解js的异步"><span><strong>如何理解js的异步？</strong></span></a></h6><p>js是一门单线程的语言，它运行在浏览器的渲染主线程中，渲染主线程只有一个。</p><p>渲染主线程承担着渲染页面，执行js等工作，如果使用同步方法会导致主线程阻塞，从而导致消息队列中的其他任务无法执行。这样就造成浪费主线程时间，页面无法正常渲染卡顿等现象出现。</p><p>所有浏览器采用异步方法，把不能立即执行的任务交给其他线程处理，主线程继续执行下一任务。其他线程把计时器网络请求等包装成任务，并放到消息队列尾部等待主线程执行。</p><p>这种模式下，浏览器永不阻塞，从而保证了单线程的流畅运行。</p></blockquote><p>任务没有优先级，只能在消息队列排队（先进先出）。消息队列可以有多个，但是消息队列有优先级！！！</p><p>消息队列可以有多个：</p><ul><li>延时队列，用于存放计时器达到后的回调任务，优先级中</li><li>交互队列， 用户存放用户操作后产生的事件处理任务，优先级高</li><li>微队列，用户存放需要最快执行的任务，优先级最高 （Promise.then 和MutationObserver)</li></ul><h4 id="事件循环式异步的实现方法" tabindex="-1"><a class="header-anchor" href="#事件循环式异步的实现方法"><span>事件循环式异步的实现方法</span></a></h4><blockquote><h6 id="什么是js的事件循环" tabindex="-1"><a class="header-anchor" href="#什么是js的事件循环"><span>什么是js的事件循环？</span></a></h6><p>事件循环又叫消息队列，是浏览器渲染主线程的工作方式。</p><p>在浏览器源码中，它开启一个不会结束的for循环，每次循环从消息队列去第一个任务执行，其他线程把任务加入到消息队列尾部等待执行。</p><p>过去把消息队列分为宏队列和微队列，这种说法已经无法满足复杂的浏览器环境，现在采用更灵活的处理方式：</p><p>根据W3C官方的解释，每个任务有不同类型，同类型任务必须在同一个队列，不同任务可以属于不同的队列（微队列，交互队列，延时队列）。在一次事件循环中，不同队列有不同的优先级，但必须有一个微队列，优先级最高。</p></blockquote><blockquote><h6 id="js中的计时器能做到精确计时吗" tabindex="-1"><a class="header-anchor" href="#js中的计时器能做到精确计时吗"><span>js中的计时器能做到精确计时吗？</span></a></h6><p>不能。</p><p>1.计算机硬件没有原子钟，无法做到精确计时；</p><p>2.操作系统的计时函数本事就有少量偏差，由于js调用操作系统的函数，因此也会有偏差；</p><p>3.按照w3c的标准，浏览器实现计时器时，如果嵌套超过5级，最小调用时间就会变成4毫秒，又造成了偏差。</p><p>4.受事件循环影响，计时器的回调函数只能在主线程空闲的时候执行，因此也会有一定偏差。</p></blockquote>',24),h=[l];function i(t,r){return e(),p("div",null,h)}const o=a(s,[["render",i],["__file","事件循环.html.vue"]]),d=JSON.parse('{"path":"/guide/JavaScript/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"事件循环","slug":"事件循环","link":"#事件循环","children":[{"level":3,"title":"1.进程和线程","slug":"_1-进程和线程","link":"#_1-进程和线程","children":[]},{"level":3,"title":"2.浏览器进程","slug":"_2-浏览器进程","link":"#_2-浏览器进程","children":[]},{"level":3,"title":"3.什么是异步？","slug":"_3-什么是异步","link":"#_3-什么是异步","children":[]}]}],"git":{"updatedTime":1712798294000,"contributors":[{"name":"陈小知","email":"cjq314@qq.com","commits":1}]},"filePathRelative":"guide/JavaScript/事件循环.md","excerpt":"<h2>事件循环</h2>\\n<h3>1.进程和线程</h3>\\n<h4>什么是进程？</h4>\\n<p>程序运行需要有它自己专属的内存空间，可以把这块内存空间简单的理解为进程。</p>\\n<h4>什么是线程？</h4>\\n<p>一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为主线程。</p>\\n<h3>2.浏览器进程</h3>\\n<p>浏览器启动之后，会自动多个进程。</p>\\n<p>浏览器进程主要有三部分组成：<strong>浏览器进程，网络进程，渲染进程。</strong></p>\\n<ul>\\n<li>\\n<p>浏览器进程 ，主要负责界面显示，用户交互，子进程管理等。浏览器进程内部会启动多个线程处理不同的任务</p>\\n</li>\\n<li>\\n<p>网络进程，负责加载网络资源。网络进程内部启动多个线程来处理不同的网络任务。</p>\\n</li>\\n<li>\\n<p>渲染进程，启动之后会启动一个渲染主线程，负责执行 HTML/CSS/JS代码。</p>\\n<p>默认情况下，浏览器会为每个标签页开启一个渲染进程，保证不同标签页之间互不影响。</p>\\n</li>\\n</ul>"}');export{o as comp,d as data};
