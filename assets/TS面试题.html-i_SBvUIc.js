import{_ as n,o as s,c as a,a as t}from"./app-CxsuIw-e.js";const e={},p=t(`<h3 id="_1-什么是typescript" tabindex="-1"><a class="header-anchor" href="#_1-什么是typescript"><span>1.什么是TypeScript？</span></a></h3><p>TypeScript是微软公司为了弥补JS存在类型缺陷开源的一门语言。</p><p>它是JS的超集，支持最新的所有JS。</p><p>TS不能直接在各端运行，需要通过ts编译器或babel转成js后才能被浏览器等环境运行。</p><p>TS扩展了类，静态类型，接口，模块等功能。</p><p><strong>特性：</strong></p><ul><li><p><strong>跨平台</strong>：TypeScript 编译器可以安装在任何操作系统上，包括 Windows、macOS 和 Linux。</p></li><li><p><strong>ES6 特性</strong>：TypeScript 包含计划中的 ECMAScript 2015 (ES6) 的大部分特性，例如箭头函数。</p></li><li><p><strong>面向对象的语言</strong>：TypeScript 提供所有标准的 OOP 功能，如类、接口和模块。</p></li><li><p><strong>静态类型检查</strong>：TypeScript 使用静态类型并帮助在编译时进行类型检查。因此，你可以在编写代码时发现编译时错误，而无需运行脚本。</p></li><li><p><strong>可选的静态类型</strong>：如果你习惯了 JavaScript 的动态类型，TypeScript 还允许可选的静态类型。</p></li></ul><h3 id="_2-类型声明和类型推断的区别" tabindex="-1"><a class="header-anchor" href="#_2-类型声明和类型推断的区别"><span>2.类型声明和类型推断的区别？</span></a></h3><p>类型声明时显式为变量指定类型；</p><p>类型推断是变量不指定类型，直接赋值，TypeScript自动推断变量类型。</p><h3 id="_3-什么是联合类型和交叉类型" tabindex="-1"><a class="header-anchor" href="#_3-什么是联合类型和交叉类型"><span>3.什么是联合类型和交叉类型？</span></a></h3><p>联合类型是，多种类型满足一种。</p><p>交叉类型是，满足多种类型的所有特性。</p><h3 id="_4-枚举-enum-是什么-它的优势-应用案例。枚举和常量枚举的区别" tabindex="-1"><a class="header-anchor" href="#_4-枚举-enum-是什么-它的优势-应用案例。枚举和常量枚举的区别"><span>4.枚举（enum）是什么，它的优势，应用案例。枚举和常量枚举的区别？</span></a></h3><p>枚举是将变量所有能出现的值都一一枚举出来，一般常见的有数字枚举（数字枚举的值默认从0自增，可以修改，可以为空），字符串枚举（字符串枚举值不能为空）。</p><p>优势：增强代码可读性。</p><p>枚举和常量枚举的区别：枚举会被编译成对象，常量枚举编译后会被删除。</p><h3 id="_5-什么是类型断言" tabindex="-1"><a class="header-anchor" href="#_5-什么是类型断言"><span>5.什么是类型断言？</span></a></h3><p>类型断言，告诉编辑器变量类型按照某个类型执行。避免类型不一致报错的场景出现。</p><h3 id="_6-typescript中的可选参数和默认参数是什么" tabindex="-1"><a class="header-anchor" href="#_6-typescript中的可选参数和默认参数是什么"><span>6.TypeScript中的可选参数和默认参数是什么？</span></a></h3><p>TS的可选参数用：a?:string ，默认参数不在？号。</p><h3 id="_7-什么是类型守卫-有什么作用" tabindex="-1"><a class="header-anchor" href="#_7-什么是类型守卫-有什么作用"><span>7.什么是类型守卫，有什么作用？</span></a></h3><p>类型守卫是一种判断变量类型是否满足条件的检测方式。</p><p>类型守卫作用：让代码更安全和可靠。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
  brand<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  model<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">isCar</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span> obj <span class="token keyword">is</span> Car <span class="token punctuation">{</span>
  <span class="token keyword">return</span> obj <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">.</span>brand <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">.</span>model <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">printCarInfo</span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCar</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Brand: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">.</span>brand<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, Model: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>obj<span class="token punctuation">.</span>model<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid car object.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-const和readonly的区别" tabindex="-1"><a class="header-anchor" href="#_8-const和readonly的区别"><span>8. const和readonly的区别?</span></a></h3><p>const声明的常量一旦<strong>赋值就不能被修改</strong>。</p><p>readonly 关键字用于标记<strong>类属性只读</strong>，不能被修改。只能在声明时和构造函数内赋值。</p><h3 id="_9-typescript数据类型都有哪些" tabindex="-1"><a class="header-anchor" href="#_9-typescript数据类型都有哪些"><span>9.TypeScript数据类型都有哪些？</span></a></h3><p><strong>基本类型</strong>：</p><ul><li><code>number</code>: 表示数字，包括整数和浮点数。</li><li><code>string</code>: 表示文本字符串。</li><li><code>boolean</code>: 表示布尔值，即<code>true</code>或<code>false</code>。</li><li><code>null</code>、<code>undefined</code>: 分别表示null和undefined。</li><li><code>symbol</code>: 表示唯一的、不可变的值。</li></ul><p><strong>复合类型</strong>：</p><ul><li><code>array</code>: 表示数组，可以使用<code>number[]</code>或<code>Array&lt;number&gt;</code>来声明其中元素的类型。</li><li><code>tuple</code>: 表示元组，用于表示固定数量和类型的数组。</li><li><code>enum</code>: 表示枚举类型，用于定义具名常量集合。</li></ul><p><strong>对象类型</strong>：</p><ul><li><code>object</code>: 表示非原始类型，即除number、string、boolean、symbol、null或undefined之外的类型。</li><li><code>interface</code>: 用于描述对象的结构，并且可以重复使用。</li></ul><p><strong>函数类型</strong>：</p><ul><li><code>function</code>: 表示函数类型。</li><li><code>void</code>: 表示函数没有返回值。</li><li><code>any</code>: 表示任意类型。</li></ul><p><strong>高级类型</strong>：</p><ul><li><code>union types</code>: 表示一个值可以是几种类型之一。</li><li><code>intersection types</code>: 表示一个值同时拥有多种类型的特性。</li></ul><h3 id="_10-interface可以给function-array-class-做声明吗" tabindex="-1"><a class="header-anchor" href="#_10-interface可以给function-array-class-做声明吗"><span>10.interface可以给Function/Array/Class 做声明吗？</span></a></h3><p>TypeScript中的<code>interface</code>可以被用来声明函数、数组和具有索引签名的类，从而帮助我们定义和限定这些数据结构的形式和行为。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 1.声明函数</span>
<span class="token keyword">interface</span> <span class="token class-name">MyFunc</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myAdd<span class="token operator">:</span> <span class="token function-variable function">MyFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 2.声明数组</span>
<span class="token keyword">interface</span> <span class="token class-name">StringArray</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myArray<span class="token operator">:</span> StringArray<span class="token punctuation">;</span>
myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 3.声明类</span>
<span class="token keyword">interface</span> <span class="token class-name">StringDictionary</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> myDict<span class="token operator">:</span> StringDictionary <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token string">&quot;30&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-typescript-中-any-类型的作用是什么-滥用会有什么后果" tabindex="-1"><a class="header-anchor" href="#_11-typescript-中-any-类型的作用是什么-滥用会有什么后果"><span>11.TypeScript 中 any 类型的作用是什么，滥用会有什么后果?</span></a></h3><p>any类型用来不确定变量的类型的时候使用，但是不推荐使用any类型，因为它有以下副作用：</p><ul><li>存在潜在的运行类型错误（编译不报错）</li><li>代码可读性下降</li><li>污染后续使用该变量的函数和上下文</li></ul><h3 id="_12-说说typescript中命名空间与模块的理解和区别" tabindex="-1"><a class="header-anchor" href="#_12-说说typescript中命名空间与模块的理解和区别"><span>12.说说TypeScript中命名空间与模块的理解和区别？</span></a></h3><p>命名空间，主要解决命名冲突的问题（重名问题），有了命名空间后，命名都在各自的空间内互不干扰。</p><p>模块，和ES的模块一样。每个模块都是单独的文件和上下文，抛出对象和函数需要用export，引入需要使用import。</p><h3 id="_13-typescript支持的类访问修饰符有哪些" tabindex="-1"><a class="header-anchor" href="#_13-typescript支持的类访问修饰符有哪些"><span>13. TypeScript支持的类访问修饰符有哪些？</span></a></h3><ul><li>公共（public）-默认，类的所有成员，其子类以及该类的实例都可以访问。</li><li>受保护（protected），该类及其子类的所有成员都可以访问它们。 但是该类的实例无法访问。</li><li>私有（private），只有类的成员可以访问它们。</li><li>只读（readonly)，属性值只能读取，不能修改。</li></ul><h3 id="_14-typescript中never和void的区别" tabindex="-1"><a class="header-anchor" href="#_14-typescript中never和void的区别"><span>14.TypeScript中never和void的区别？</span></a></h3><ul><li>void 表示没有任何类型（可以被赋值为 null 和 undefined）。</li><li>never 表示一个不包含值的类型，即表示永远不存在的值。</li></ul><h3 id="_15-typescript中any和unknown有什么区别" tabindex="-1"><a class="header-anchor" href="#_15-typescript中any和unknown有什么区别"><span>15.TypeScript中any和unknown有什么区别？</span></a></h3><p>any 类型的值执行操作之前，我们不必进行任何检查。</p><p>unknown 类型会更加严格：在对 unknown 类型的值执行大多数操作之前，我们必须进行某种形式的检查。</p><h3 id="_16-typescript中的泛型是什么" tabindex="-1"><a class="header-anchor" href="#_16-typescript中的泛型是什么"><span>16.TypeScript中的泛型是什么？</span></a></h3><p>泛型是值在定义函数，接口或类时，遇到参数或返回值类型不明确时，需要用泛型表示参数和返回值的类型。</p><h3 id="_17-type和interface区别和相同点" tabindex="-1"><a class="header-anchor" href="#_17-type和interface区别和相同点"><span>17.type和interface区别和相同点？</span></a></h3><p><strong>相同点</strong>：</p><ul><li>都可以给对象指定类型，都是为了简化复用对象结构。</li><li>都允许互相扩展extends</li></ul><p><strong>不同点：</strong></p><ul><li><p>接口interface 只能为对象指定类型；类型别名type 可以为任意类型指定别名。</p></li><li><p>接口之间可以继承，类型别名不可以。</p></li><li><p>同名接口属性可以合并，类型别名type不能。</p></li><li><p>写法不同。接口写法类似定义类；类型别名类似 定义对象需要用到=号。</p></li></ul><p>接口写法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IPer</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型别名写法：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">IPer</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>
	age<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-omit-类型有什么作用" tabindex="-1"><a class="header-anchor" href="#_18-omit-类型有什么作用"><span>18.Omit 类型有什么作用？</span></a></h3><p>Omit 以一个类型为基础支持<strong>删除某些属性，然后返回一个新类型</strong>。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token builtin">string</span>
  description<span class="token operator">:</span> <span class="token builtin">string</span>
  completed<span class="token operator">:</span> <span class="token builtin">boolean</span>
  createdAt<span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> <span class="token class-name">TodoPreview</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&quot;description&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_19-typescript中什么是装饰器" tabindex="-1"><a class="header-anchor" href="#_19-typescript中什么是装饰器"><span>19.TypeScript中什么是装饰器？</span></a></h3><p>装饰器（Decorator）是TypeScript提供的一个高级语法，它类似于一种特殊类型的声明，可以附加到类声明，方法，访问符，属性或参数上。</p><p>装饰器主要以函数的形式出现，运行在编译阶段，以实现对所修饰对象的行为的修改或增强。</p><p><strong>装饰器分为：</strong></p><ul><li>类装饰器： 可以观察、修改、或替换类定义。它在提供元编程能力方面特别有用，能够实现诸如依赖注入等高级概念。</li><li>方法装饰器： 可以监视、修改或者替换类的方法定义。这对于日志记录、性能监控、以及某些应用程序级别的业务逻辑（如记录操作者信息）有巨大的用处。</li><li>属性装饰器： 可以监视、修改或替换类的属性定义。比如实现类型检查，或者实现相关get/set方法等。</li><li>参数装饰器： 对类方法中的参数进行注解。</li><li>访问器装饰器: 用于装饰类的访问器，即类中的get与set方法。</li></ul><p><strong>装饰器用法：</strong></p><p>谁使用就放到谁前面：@装饰器</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 定义装饰器</span>
<span class="token keyword">function</span> <span class="token function">LogClass</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">New instance of </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> class created.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 定义装饰器</span>
<span class="token keyword">function</span> <span class="token function">LogMethod</span><span class="token punctuation">(</span>target<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> propertyKey<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> descriptor<span class="token operator">:</span> PropertyDescriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Method </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>propertyKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> of class </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>target<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is called.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用装饰器修饰类</span>
<span class="token decorator"><span class="token at operator">@</span><span class="token function">LogClass</span></span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;This is MyClass constructor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 使用装饰器修饰方法</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">LogMethod</span></span>
  <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;This is myMethod&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>开启装饰器：</strong></p><p>在 <strong><code>tsconfig.json</code></strong> 文件中，有一个叫 <strong><code>experimentalDecorators</code></strong> 的属性，你需要将其设置为 <strong><code>true</code></strong> 。没有正式发布，需要手动开启装饰器。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es5&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">&quot;emitDecoratorMetadata&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_20-typescript中什么是函数重载" tabindex="-1"><a class="header-anchor" href="#_20-typescript中什么是函数重载"><span>20.TypeScript中什么是函数重载？</span></a></h3><p>函数重载是指<strong>函数根据传入不同的参数，返回不同类型的数据</strong>。</p><p>同一个函数名，根据参数及返回值的不同声明多次，但是实现只有最下面的一次。调用的时候编辑器会提示该函数的多种用法。</p><p><strong>注意：JS不能实现函数重载，同名函数后面的会覆盖前面的函数。</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 上边是声明</span>
<span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token comment">// 因为我们在下边有具体函数的实现，所以这里并不需要添加 declare 关键字</span>

<span class="token comment">// 下边是实现</span>
<span class="token keyword">function</span> <span class="token function">add</span> <span class="token punctuation">(</span>arg1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> arg2<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在实现上我们要注意严格判断两个参数的类型是否相等，而不能简单的写一个 arg1 + arg2</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arg1 <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> arg2 <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arg1 <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> arg2 <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-keyof和typeof关键字的作用" tabindex="-1"><a class="header-anchor" href="#_21-keyof和typeof关键字的作用"><span>21.keyof和typeof关键字的作用？</span></a></h3><ul><li><strong>keyof 索引类型查询操作符</strong>： 获取索引类型的属性名，最后构成联合类型。</li><li><strong>typeof</strong>： 获取一个变量或对象的类型。</li></ul><h3 id="_22-declare有什么用" tabindex="-1"><a class="header-anchor" href="#_22-declare有什么用"><span>22.declare有什么用？</span></a></h3><p>declare是用来定义全局变量、全局函数、全局命名空间。</p><p>declare global为全局对象window增加新的属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> global <span class="token punctuation">{</span> 
   <span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span> 
        csrf<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> 
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在TS项目中引入第三方库，或图片，css等文件，如果找不到就需要用到 declare定义成全局变量。</p>`,92),i=[p];function o(l,c){return s(),a("div",null,i)}const u=n(e,[["render",o],["__file","TS面试题.html.vue"]]),d=JSON.parse('{"path":"/guide/TypeScript/TS%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"1.什么是TypeScript？","slug":"_1-什么是typescript","link":"#_1-什么是typescript","children":[]},{"level":3,"title":"2.类型声明和类型推断的区别？","slug":"_2-类型声明和类型推断的区别","link":"#_2-类型声明和类型推断的区别","children":[]},{"level":3,"title":"3.什么是联合类型和交叉类型？","slug":"_3-什么是联合类型和交叉类型","link":"#_3-什么是联合类型和交叉类型","children":[]},{"level":3,"title":"4.枚举（enum）是什么，它的优势，应用案例。枚举和常量枚举的区别？","slug":"_4-枚举-enum-是什么-它的优势-应用案例。枚举和常量枚举的区别","link":"#_4-枚举-enum-是什么-它的优势-应用案例。枚举和常量枚举的区别","children":[]},{"level":3,"title":"5.什么是类型断言？","slug":"_5-什么是类型断言","link":"#_5-什么是类型断言","children":[]},{"level":3,"title":"6.TypeScript中的可选参数和默认参数是什么？","slug":"_6-typescript中的可选参数和默认参数是什么","link":"#_6-typescript中的可选参数和默认参数是什么","children":[]},{"level":3,"title":"7.什么是类型守卫，有什么作用？","slug":"_7-什么是类型守卫-有什么作用","link":"#_7-什么是类型守卫-有什么作用","children":[]},{"level":3,"title":"8. const和readonly的区别?","slug":"_8-const和readonly的区别","link":"#_8-const和readonly的区别","children":[]},{"level":3,"title":"9.TypeScript数据类型都有哪些？","slug":"_9-typescript数据类型都有哪些","link":"#_9-typescript数据类型都有哪些","children":[]},{"level":3,"title":"10.interface可以给Function/Array/Class 做声明吗？","slug":"_10-interface可以给function-array-class-做声明吗","link":"#_10-interface可以给function-array-class-做声明吗","children":[]},{"level":3,"title":"11.TypeScript 中 any 类型的作用是什么，滥用会有什么后果?","slug":"_11-typescript-中-any-类型的作用是什么-滥用会有什么后果","link":"#_11-typescript-中-any-类型的作用是什么-滥用会有什么后果","children":[]},{"level":3,"title":"12.说说TypeScript中命名空间与模块的理解和区别？","slug":"_12-说说typescript中命名空间与模块的理解和区别","link":"#_12-说说typescript中命名空间与模块的理解和区别","children":[]},{"level":3,"title":"13. TypeScript支持的类访问修饰符有哪些？","slug":"_13-typescript支持的类访问修饰符有哪些","link":"#_13-typescript支持的类访问修饰符有哪些","children":[]},{"level":3,"title":"14.TypeScript中never和void的区别？","slug":"_14-typescript中never和void的区别","link":"#_14-typescript中never和void的区别","children":[]},{"level":3,"title":"15.TypeScript中any和unknown有什么区别？","slug":"_15-typescript中any和unknown有什么区别","link":"#_15-typescript中any和unknown有什么区别","children":[]},{"level":3,"title":"16.TypeScript中的泛型是什么？","slug":"_16-typescript中的泛型是什么","link":"#_16-typescript中的泛型是什么","children":[]},{"level":3,"title":"17.type和interface区别和相同点？","slug":"_17-type和interface区别和相同点","link":"#_17-type和interface区别和相同点","children":[]},{"level":3,"title":"18.Omit 类型有什么作用？","slug":"_18-omit-类型有什么作用","link":"#_18-omit-类型有什么作用","children":[]},{"level":3,"title":"19.TypeScript中什么是装饰器？","slug":"_19-typescript中什么是装饰器","link":"#_19-typescript中什么是装饰器","children":[]},{"level":3,"title":"20.TypeScript中什么是函数重载？","slug":"_20-typescript中什么是函数重载","link":"#_20-typescript中什么是函数重载","children":[]},{"level":3,"title":"21.keyof和typeof关键字的作用？","slug":"_21-keyof和typeof关键字的作用","link":"#_21-keyof和typeof关键字的作用","children":[]},{"level":3,"title":"22.declare有什么用？","slug":"_22-declare有什么用","link":"#_22-declare有什么用","children":[]}],"git":{"updatedTime":1712798294000,"contributors":[{"name":"陈小知","email":"cjq314@qq.com","commits":1}]},"filePathRelative":"guide/TypeScript/TS面试题.md","excerpt":"<h3>1.什么是TypeScript？</h3>\\n<p>TypeScript是微软公司为了弥补JS存在类型缺陷开源的一门语言。</p>\\n<p>它是JS的超集，支持最新的所有JS。</p>\\n<p>TS不能直接在各端运行，需要通过ts编译器或babel转成js后才能被浏览器等环境运行。</p>\\n<p>TS扩展了类，静态类型，接口，模块等功能。</p>\\n<p><strong>特性：</strong></p>\\n<ul>\\n<li>\\n<p><strong>跨平台</strong>：TypeScript 编译器可以安装在任何操作系统上，包括 Windows、macOS 和 Linux。</p>\\n</li>\\n<li>\\n<p><strong>ES6 特性</strong>：TypeScript 包含计划中的 ECMAScript 2015 (ES6) 的大部分特性，例如箭头函数。</p>\\n</li>\\n<li>\\n<p><strong>面向对象的语言</strong>：TypeScript 提供所有标准的 OOP 功能，如类、接口和模块。</p>\\n</li>\\n<li>\\n<p><strong>静态类型检查</strong>：TypeScript 使用静态类型并帮助在编译时进行类型检查。因此，你可以在编写代码时发现编译时错误，而无需运行脚本。</p>\\n</li>\\n<li>\\n<p><strong>可选的静态类型</strong>：如果你习惯了 JavaScript 的动态类型，TypeScript 还允许可选的静态类型。</p>\\n</li>\\n</ul>"}');export{u as comp,d as data};
