import{_ as s,c as a,b as p,o as e}from"./app-BI9Ul3hK.js";const t={};function l(c,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h3 id="_1-深拷贝需要注意哪些问题" tabindex="-1"><a class="header-anchor" href="#_1-深拷贝需要注意哪些问题"><span>1.深拷贝需要注意哪些问题？</span></a></h3><p>常见的深拷贝方法：assign，递归全赋值，JSON.parse(JSON.stringify())，函数返回等</p><ul><li><strong>Object.assign</strong> 只能深拷贝顶层属性和值，深层属性也是浅拷贝</li><li><strong>...扩展运算符</strong> 同上只能深拷贝顶层属性和方法！</li><li><strong>JSON 实现深拷贝</strong>，不足：构造函数/function，属性值为undefined、function、symbol的也会丢失，Set和Map变成数组，Data变成String等</li><li><strong>函数返回</strong>，返回对象在函数内定义属于深拷贝，在函数外，算浅拷贝。</li><li><strong>递归循环是最完美的</strong>，但是需要考虑全数据类型，如：Map/Set。另外递归时</li></ul><p>深拷贝时除了要考虑特殊值处理，还要考虑递归时不能影响性能，或者没有终止条件造成内存泄漏。</p><p>还要考虑深拷贝不能复制原型链上的方法和属性，还有getter和setter也是无法复制的。</p><h3 id="_2-实现一个unshift方法" tabindex="-1"><a class="header-anchor" href="#_2-实现一个unshift方法"><span>2.实现一个unshift方法</span></a></h3><p><strong>unShift作用：将参数添加到数组的前面，原数组发生变化，并返回数组的长度。</strong></p><p>方法一：ES6扩展运算符 将参数解构成逗号分割参数，传到到splice的第三个参数里，再返回this的长度</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myUnshift</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> arr<span class="token punctuation">.</span><span class="token function">myUnshift</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：循环遍历最后的参数，通过splice添加到数组的头部</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myUnshift</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length</span>
<span class="line">    <span class="token comment">// 从后往前取，并添加到数组的索引0的位置</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 返回数组的长度</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-实现一个数组去重的方法" tabindex="-1"><a class="header-anchor" href="#_3-实现一个数组去重的方法"><span>3.实现一个数组去重的方法</span></a></h3><p>方法一：通过Array.from和Set特性结合。缺点：对象格式无法去重</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myUnoin</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：用ES6的扩展运算符和Set特性结合。缺点：对象格式无法去重</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">Array.prototype.myUnoin = function() {</span>
<span class="line">    return [...new Set(this)]</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法三：遍历for循环</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myUnoin</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> res</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-如何获取指定返回内的随机数" tabindex="-1"><a class="header-anchor" href="#_4-如何获取指定返回内的随机数"><span>4.如何获取指定返回内的随机数</span></a></h3><ul><li>Math.round 四舍五入</li><li>Math.floor 向下取整</li><li>Math.ceil 向上取整</li><li>Math.random 随机数（0-1）</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span>max</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">+</span> min <span class="token punctuation">)</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>Math.round( Math.random() * (max - min) ) 是取min - max 之间相差的差值随机数</p></li><li><p>Math.round( Math.random() * (max - min) + min ) 是取【min - max 】之间的随机数，包含min,max.</p></li><li><p>Math.floor ( Math.random() * (max - min) + min ) 是取【min - max ）之间的随机数，包含min, 不含max.</p></li><li><p>Math.ceil ( Math.random() * (max - min) + min ) 是取（min - max 】之间的随机数，不包含min, 含max.</p></li></ul><h3 id="_5-打印100以内的质数-素数" tabindex="-1"><a class="header-anchor" href="#_5-打印100以内的质数-素数"><span>5.打印100以内的质数/素数</span></a></h3><p>质数/素数：大于1 ，且 只能被1 和本身整除</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">2</span> </span>
<span class="line">    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 假设是质数</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 除了本身和1之外，有其他数被整除，就不是质数，直接跳出</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">===</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">!=</span> i <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                flag <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        num <span class="token operator">++</span> </span>
<span class="line">        flag <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-如何获取url中的参数" tabindex="-1"><a class="header-anchor" href="#_6-如何获取url中的参数"><span>6.如何获取url中的参数</span></a></h3><p>获取url的参数，通过js提供的URLSearchParams对象获取</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">getURLParameter</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">const</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">const</span> urlParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">return</span> urlParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过 Object.fromEntries(将键值对列表：可迭代的伪对象，如Map，转为对象) 将 URLSearchParams对象的 entries 转成一个对象key:value 的形式。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">getURLParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">const</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">const</span> urlParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">const</span> params <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>urlParams<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> params<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-如何实现数组的随机排序" tabindex="-1"><a class="header-anchor" href="#_7-如何实现数组的随机排序"><span>7.如何实现数组的随机排序</span></a></h3><p>方法一：使用sort排序，sort函数通过数值的正负来排序前后的顺序，隐藏通过随机数减去0.5实现随机。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>方法二：利用es6的解构，实现洗牌算法，跟随机位置数组换位。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">shuffleArray</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">const</span>  arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> j <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">[</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> arr1</span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-深层数组扁平化-拍扁数组" tabindex="-1"><a class="header-anchor" href="#_8-深层数组扁平化-拍扁数组"><span>8.深层数组扁平化（拍扁数组）</span></a></h3><p>方法一：ES6新增的数组方法 flat。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span> <span class="token number">Infinity</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：递归循环拼接数组，循环遇到数组就递归拼接。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> res</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-介绍一下bfc及创建bfc的方法" tabindex="-1"><a class="header-anchor" href="#_9-介绍一下bfc及创建bfc的方法"><span>9.介绍一下BFC及创建BFC的方法</span></a></h3><p>BFC 是块级格式上下文，简单理解就是：独立布局，内部布局与外部互不影响。</p><h5 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景：</span></a></h5><p>浮动元素导致父级盒子高度崩塌</p><h5 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法"><span>解决办法：</span></a></h5><p>父级盒子创建BFC块级上下文，内部不影响外部布局。</p><h5 id="创建bfc-父级样式设置" tabindex="-1"><a class="header-anchor" href="#创建bfc-父级样式设置"><span>创建BFC-父级样式设置：</span></a></h5><ul><li><p>overflow: auto,scroll,hidden</p></li><li><p>position: absolute,fixed</p></li></ul><h3 id="_10-介绍下-bfc-ifc-gfc-ffc" tabindex="-1"><a class="header-anchor" href="#_10-介绍下-bfc-ifc-gfc-ffc"><span>10.介绍下 BFC，IFC, GFC, FFC</span></a></h3><ul><li>BFC 块级格式上下文</li><li>IFC 行内格式化上下文</li><li>GFC 网格布局上下文</li><li>FFC 弹性布局上下文</li></ul><h3 id="_11-css清除浮动的方法有哪些" tabindex="-1"><a class="header-anchor" href="#_11-css清除浮动的方法有哪些"><span>11.css清除浮动的方法有哪些</span></a></h3><ul><li>clear清除浮动 浮动元素最尾部新增clear样式的元素或伪元素 {clear:both;height:0;overflow:hidden}</li><li>给浮动元素的父级设置高度</li><li>父级元素设置 overflow:hidden</li></ul><h3 id="_12-css3新增了哪些" tabindex="-1"><a class="header-anchor" href="#_12-css3新增了哪些"><span>12.css3新增了哪些？</span></a></h3><ul><li>选择器</li><li>盒子模型 | border-radius | box-shadow | border-image</li><li>背景：background-size|origin|clip</li><li>文本效果：text-shadow | word-wrap</li><li>渐变： 线性渐变|径向渐变</li><li>变形transform|过渡动画 transtion @keyframe| 动画 animation</li><li>媒体查询</li><li>多列布局</li></ul><h3 id="_13-css加载会造成阻塞吗-提高css加载速度有哪些方法" tabindex="-1"><a class="header-anchor" href="#_13-css加载会造成阻塞吗-提高css加载速度有哪些方法"><span>13.css加载会造成阻塞吗？提高css加载速度有哪些方法</span></a></h3><ul><li>css 不会阻塞DOM树解析</li><li>css会阻塞DOM渲染</li><li>css加载会阻塞后面JS语句执行</li></ul><h5 id="如何提高css加载速度" tabindex="-1"><a class="header-anchor" href="#如何提高css加载速度"><span>如何提高css加载速度：</span></a></h5><ul><li>cdn加速</li><li>css 压缩，服务器开启gzip压缩</li><li>合理使用缓存 cache-control</li><li>合并多个css，减少http请求次数</li></ul><h3 id="_14-简单说说浏览器渲染流程" tabindex="-1"><a class="header-anchor" href="#_14-简单说说浏览器渲染流程"><span>14.简单说说浏览器渲染流程</span></a></h3><p>浏览器的网络线程通过网络通信收到HTML文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列中，在事件循环机制作用下，渲染主线程取出消息队列的渲染任务进行渲染。</p><p>整个渲染阶段分为8部分：html解析，样式计算，布局，分层，绘制，分块，光栅格，画。最后生成浏览器显示屏的像素点。</p><h3 id="_15-数组方法-find和filter的区别" tabindex="-1"><a class="header-anchor" href="#_15-数组方法-find和filter的区别"><span>15.数组方法 find和filter的区别</span></a></h3><p>共同点：不改变原数组，返回新内容</p><p>区别：find返回第一个符合条件的具体内容（对象，值类型），filter返回符合条件所有内容（数组类型）</p><h3 id="_16-数组方法some和every的区别" tabindex="-1"><a class="header-anchor" href="#_16-数组方法some和every的区别"><span>16.数组方法some和every的区别</span></a></h3><p>some 有一项符合条件就返回 true</p><p>every 全部符合条件才返回true</p><h3 id="_17-promise有几种状态" tabindex="-1"><a class="header-anchor" href="#_17-promise有几种状态"><span>17.Promise有几种状态</span></a></h3><p>Promise是用来解决异步编程的解决方案。有三个状态，但是状态的改变方法只有2种可能：pending =&gt; fulfilled 成功 或 pending =&gt; rejected 失败</p><ul><li>pending 进行中</li><li>fulfilled 已成功</li><li>rejected 已失效</li></ul><h3 id="_18-promise有什么用-promise-有什么缺点-有什么解决方案" tabindex="-1"><a class="header-anchor" href="#_18-promise有什么用-promise-有什么缺点-有什么解决方案"><span>18.Promise有什么用？Promise 有什么缺点？ 有什么解决方案</span></a></h3><p>Promise是异步编程的解决方案。JS的异步编程的发展史：Promise =&gt; Generator = &gt; async await 。</p><p><strong>Promise 缺点：</strong></p><ul><li>回调地域，不便维护</li></ul><p>Promise.then 可以无限执行下去，then方法内部还可以嵌套，这样又复现了axios 回调地域的问题。</p><p><strong>解决方案：</strong></p><ul><li><p>使用 async await</p></li><li><p>使用 Generator: * yield</p></li></ul><h3 id="_19-vue-项目中的-scoped-作用和原理" tabindex="-1"><a class="header-anchor" href="#_19-vue-项目中的-scoped-作用和原理"><span>19.vue 项目中的 scoped 作用和原理</span></a></h3><p>**作用：**scoped用于css仅在当前页面/组件生效，其他页面不生效！</p><p><strong>原理</strong>：给元素节点新增自定义属性，根据css属性选择器添加样式。</p><h3 id="_20-new操作符具体做了什么-如何实现一个new" tabindex="-1"><a class="header-anchor" href="#_20-new操作符具体做了什么-如何实现一个new"><span>20.new操作符具体做了什么？ 如何实现一个new?</span></a></h3><p>new之后，默认做了4步：</p><ul><li><ol><li><p>创建一个空对象</p></li><li><p>将空对象原型指向构造函数的原型</p></li><li><p>将空对象作为构造函数的上下文（this 指向到空对象。不使用new的话 ，this指向全局window）</p></li><li><p>对构造函数**有返回值（构造函数里面使用了return）**的进行处理判断：</p><p>基本类型返回构造函数创建的对象</p><p>引用类型 直接返回引用类型</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 基本类型 new返回构造函数创建的对象</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">	</span>
<span class="line">	<span class="token comment">// 引用类型 new之后直接返回 【1,2,3】</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul><p><strong>如何实现一个new操作符？</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">creatNew</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建一个空对象</span></span>
<span class="line">	<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Objeect.creat({})</span></span>
<span class="line">    <span class="token comment">// 空对象原型 =&gt; 构造函数原型</span></span>
<span class="line">    Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 改变this的指向到 obj</span></span>
<span class="line">    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>args<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 判断返回值类型是否是 引用类型</span></span>
<span class="line">    <span class="token keyword">return</span> res <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_21-闭包" tabindex="-1"><a class="header-anchor" href="#_21-闭包"><span>21.闭包</span></a></h3><h4 id="闭包是什么" tabindex="-1"><a class="header-anchor" href="#闭包是什么"><span>闭包是什么？</span></a></h4><p>闭包是一个函数内部返回另外一个函数（函数嵌套）</p><h4 id="闭包的优点" tabindex="-1"><a class="header-anchor" href="#闭包的优点"><span>闭包的优点</span></a></h4><p>内部函数可以访问外部变量，可以解决一些问题</p><h4 id="闭包的缺点" tabindex="-1"><a class="header-anchor" href="#闭包的缺点"><span>闭包的缺点</span></a></h4><p>可能占用内容，变量无法被回收，IE环境会导致内存泄露。</p><h4 id="解决办法-1" tabindex="-1"><a class="header-anchor" href="#解决办法-1"><span>解决办法</span></a></h4><p>执行完之后，将变量清空，设置为null</p><h3 id="_22-获取字符中出现次数最多的字母" tabindex="-1"><a class="header-anchor" href="#_22-获取字符中出现次数最多的字母"><span>22.获取字符中出现次数最多的字母</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">strMax</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> strArr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 1.创建对象，每个字符默认出现次数1，存在就++</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>strArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> item <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">++</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">            obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 2.获取obj出现次数最多的数字</span></span>
<span class="line">    <span class="token keyword">let</span> vals <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> valSet <span class="token operator">=</span> vals<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> b<span class="token operator">-</span>a<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> maxNub <span class="token operator">=</span> valSet<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token comment">// 3.遍历obj，取出最大数字对应的字符</span></span>
<span class="line">    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> maxNub<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            res <span class="token operator">=</span> item</span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> res</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_23-介绍下set和map的区别" tabindex="-1"><a class="header-anchor" href="#_23-介绍下set和map的区别"><span>23.介绍下Set和Map的区别</span></a></h3><p>共同点：都是ES6新增的数据结构，都有has，delete，size等属性方法。</p><p>区别：</p><ul><li><p>返回类型不同</p><p>Set返回是元素唯一的集合</p><p>Map返回是键值对集合</p></li><li><p>接收类型不同</p></li></ul><p>​ Set接收数组类型作为实参</p><p>​ Map接收 二维数组作为实参，且二维子数组长度进前两位有效，最后会被转成键值对。</p><ul><li><p>新增子元素方法不同</p><p>Set 使用add方法</p><p>Map使用set方法</p></li></ul><h3 id="_24-模拟微信小程序rpx单位-始终宽度保持750rem-且支持移动横屏" tabindex="-1"><a class="header-anchor" href="#_24-模拟微信小程序rpx单位-始终宽度保持750rem-且支持移动横屏"><span>24.模拟微信小程序rpx单位，始终宽度保持750rem，且支持移动横屏？</span></a></h3><p>原理：监听窗口变化，动态改变根字号的大小 等于 页面宽度除以 750。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token function">setwidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">setwidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> w <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth</span>
<span class="line">    document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> w <span class="token operator">/</span> <span class="token number">750</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span>setwidth<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_25-html中的base标签有什么用" tabindex="-1"><a class="header-anchor" href="#_25-html中的base标签有什么用"><span>25.html中的base标签有什么用？</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.baidu.com<span class="token punctuation">&quot;</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>_blank<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>base的href属性，为页面所有的引用链接添加默认的URL前缀</li><li>base的target属性，为页面所有的跳转链接添加打开方式，当前标签打开还是新标签打开。</li></ul><h3 id="_26-在引入外部js文件时-defer与async的区别是什么" tabindex="-1"><a class="header-anchor" href="#_26-在引入外部js文件时-defer与async的区别是什么"><span>26.在引入外部js文件时，defer与async的区别是什么？</span></a></h3><ul><li>defer: 延时加载，并在文档解析完成之后执行</li><li>async：异步加载，下载完成后立即执行</li></ul><h3 id="_27-按钮权限的缺陷是什么" tabindex="-1"><a class="header-anchor" href="#_27-按钮权限的缺陷是什么"><span>27.按钮权限的缺陷是什么？</span></a></h3><p>缺陷：</p><ul><li>前端安全性，可以通过修改代码或开发者工具绕过按钮权限</li><li>难以维护，随着页面复杂度增加，多角色多页面可能导致权限管理不一致和难以维护。</li></ul><p>注意：按钮权限只能作为辅助手段，不能真正的安全控制。真正的权限控制应该放在后端进行。</p><h3 id="_28-什么是类数组-都有哪些类数组" tabindex="-1"><a class="header-anchor" href="#_28-什么是类数组-都有哪些类数组"><span>28.什么是类数组？都有哪些类数组？</span></a></h3><p>类数组，就是数据结构和数组很类似，但是又不是数组，不过可以通过Array.from转成数组。</p><p>常见类数组有：</p><ul><li>函数的参数集合 argumentor</li><li>页面元素集合</li><li>Set对象集合</li></ul><h3 id="_29-什么是dns-dns的解析过程简单说说" tabindex="-1"><a class="header-anchor" href="#_29-什么是dns-dns的解析过程简单说说"><span>29.什么是DNS？DNS的解析过程简单说说?</span></a></h3><p>dns就是把域名转成ip地址的过程。浏览器输入域名，dns解析就会找到对应的ip。</p><p>解析过程：</p><ul><li>地址栏输入域名地址，电脑会检测dns缓存是否有这个ip地址</li><li>如果找到同时没有过期，那么电脑就会直接使用这个IP</li><li>如果没有找到，就向本地DNS服务器发起查询请求</li><li>本地DNS服务器会检测缓存，没有IP就向根域名服务器发送请求</li><li>跟服务器就会将域名ip地址返回给本地dns服务器</li></ul>`,123)]))}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/mds/%E9%9D%A2%E8%AF%95%E9%A2%98.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"1.深拷贝需要注意哪些问题？","slug":"_1-深拷贝需要注意哪些问题","link":"#_1-深拷贝需要注意哪些问题","children":[]},{"level":3,"title":"2.实现一个unshift方法","slug":"_2-实现一个unshift方法","link":"#_2-实现一个unshift方法","children":[]},{"level":3,"title":"3.实现一个数组去重的方法","slug":"_3-实现一个数组去重的方法","link":"#_3-实现一个数组去重的方法","children":[]},{"level":3,"title":"4.如何获取指定返回内的随机数","slug":"_4-如何获取指定返回内的随机数","link":"#_4-如何获取指定返回内的随机数","children":[]},{"level":3,"title":"5.打印100以内的质数/素数","slug":"_5-打印100以内的质数-素数","link":"#_5-打印100以内的质数-素数","children":[]},{"level":3,"title":"6.如何获取url中的参数","slug":"_6-如何获取url中的参数","link":"#_6-如何获取url中的参数","children":[]},{"level":3,"title":"7.如何实现数组的随机排序","slug":"_7-如何实现数组的随机排序","link":"#_7-如何实现数组的随机排序","children":[]},{"level":3,"title":"8.深层数组扁平化（拍扁数组）","slug":"_8-深层数组扁平化-拍扁数组","link":"#_8-深层数组扁平化-拍扁数组","children":[]},{"level":3,"title":"9.介绍一下BFC及创建BFC的方法","slug":"_9-介绍一下bfc及创建bfc的方法","link":"#_9-介绍一下bfc及创建bfc的方法","children":[]},{"level":3,"title":"10.介绍下 BFC，IFC, GFC, FFC","slug":"_10-介绍下-bfc-ifc-gfc-ffc","link":"#_10-介绍下-bfc-ifc-gfc-ffc","children":[]},{"level":3,"title":"11.css清除浮动的方法有哪些","slug":"_11-css清除浮动的方法有哪些","link":"#_11-css清除浮动的方法有哪些","children":[]},{"level":3,"title":"12.css3新增了哪些？","slug":"_12-css3新增了哪些","link":"#_12-css3新增了哪些","children":[]},{"level":3,"title":"13.css加载会造成阻塞吗？提高css加载速度有哪些方法","slug":"_13-css加载会造成阻塞吗-提高css加载速度有哪些方法","link":"#_13-css加载会造成阻塞吗-提高css加载速度有哪些方法","children":[]},{"level":3,"title":"14.简单说说浏览器渲染流程","slug":"_14-简单说说浏览器渲染流程","link":"#_14-简单说说浏览器渲染流程","children":[]},{"level":3,"title":"15.数组方法 find和filter的区别","slug":"_15-数组方法-find和filter的区别","link":"#_15-数组方法-find和filter的区别","children":[]},{"level":3,"title":"16.数组方法some和every的区别","slug":"_16-数组方法some和every的区别","link":"#_16-数组方法some和every的区别","children":[]},{"level":3,"title":"17.Promise有几种状态","slug":"_17-promise有几种状态","link":"#_17-promise有几种状态","children":[]},{"level":3,"title":"18.Promise有什么用？Promise 有什么缺点？ 有什么解决方案","slug":"_18-promise有什么用-promise-有什么缺点-有什么解决方案","link":"#_18-promise有什么用-promise-有什么缺点-有什么解决方案","children":[]},{"level":3,"title":"19.vue 项目中的 scoped 作用和原理","slug":"_19-vue-项目中的-scoped-作用和原理","link":"#_19-vue-项目中的-scoped-作用和原理","children":[]},{"level":3,"title":"20.new操作符具体做了什么？ 如何实现一个new?","slug":"_20-new操作符具体做了什么-如何实现一个new","link":"#_20-new操作符具体做了什么-如何实现一个new","children":[]},{"level":3,"title":"21.闭包","slug":"_21-闭包","link":"#_21-闭包","children":[]},{"level":3,"title":"22.获取字符中出现次数最多的字母","slug":"_22-获取字符中出现次数最多的字母","link":"#_22-获取字符中出现次数最多的字母","children":[]},{"level":3,"title":"23.介绍下Set和Map的区别","slug":"_23-介绍下set和map的区别","link":"#_23-介绍下set和map的区别","children":[]},{"level":3,"title":"24.模拟微信小程序rpx单位，始终宽度保持750rem，且支持移动横屏？","slug":"_24-模拟微信小程序rpx单位-始终宽度保持750rem-且支持移动横屏","link":"#_24-模拟微信小程序rpx单位-始终宽度保持750rem-且支持移动横屏","children":[]},{"level":3,"title":"25.html中的base标签有什么用？","slug":"_25-html中的base标签有什么用","link":"#_25-html中的base标签有什么用","children":[]},{"level":3,"title":"26.在引入外部js文件时，defer与async的区别是什么？","slug":"_26-在引入外部js文件时-defer与async的区别是什么","link":"#_26-在引入外部js文件时-defer与async的区别是什么","children":[]},{"level":3,"title":"27.按钮权限的缺陷是什么？","slug":"_27-按钮权限的缺陷是什么","link":"#_27-按钮权限的缺陷是什么","children":[]},{"level":3,"title":"28.什么是类数组？都有哪些类数组？","slug":"_28-什么是类数组-都有哪些类数组","link":"#_28-什么是类数组-都有哪些类数组","children":[]},{"level":3,"title":"29.什么是DNS？DNS的解析过程简单说说?","slug":"_29-什么是dns-dns的解析过程简单说说","link":"#_29-什么是dns-dns的解析过程简单说说","children":[]}],"git":{},"filePathRelative":"mds/面试题.md","excerpt":"<h3>1.深拷贝需要注意哪些问题？</h3>\\n<p>常见的深拷贝方法：assign，递归全赋值，JSON.parse(JSON.stringify())，函数返回等</p>\\n<ul>\\n<li><strong>Object.assign</strong>  只能深拷贝顶层属性和值，深层属性也是浅拷贝</li>\\n<li><strong>...扩展运算符</strong> 同上只能深拷贝顶层属性和方法！</li>\\n<li><strong>JSON 实现深拷贝</strong>，不足：构造函数/function，属性值为undefined、function、symbol的也会丢失，Set和Map变成数组，Data变成String等</li>\\n<li><strong>函数返回</strong>，返回对象在函数内定义属于深拷贝，在函数外，算浅拷贝。</li>\\n<li><strong>递归循环是最完美的</strong>，但是需要考虑全数据类型，如：Map/Set。另外递归时</li>\\n</ul>"}');export{o as comp,u as data};
