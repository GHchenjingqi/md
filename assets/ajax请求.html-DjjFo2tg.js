import{_ as n,o as a,c as s,a as t}from"./app-CxsuIw-e.js";const e={},p=t(`<h2 id="ajax-请求" tabindex="-1"><a class="header-anchor" href="#ajax-请求"><span>Ajax 请求</span></a></h2><h3 id="_1-什么是ajax" tabindex="-1"><a class="header-anchor" href="#_1-什么是ajax"><span>1.什么是Ajax ?</span></a></h3><p>就是使用 <strong>XMLHttpRequest</strong> 对象与服务器通信。</p><h3 id="_2-ajax优缺点" tabindex="-1"><a class="header-anchor" href="#_2-ajax优缺点"><span>2.Ajax优缺点</span></a></h3><p>优点：</p><ul><li>页面无需刷新与服务端进行通信</li><li>可以实现局部刷新功能</li></ul><p>缺点：</p><ul><li>存在跨域问题</li><li>对SEO不友好</li></ul><h3 id="_3-实现xhr请求数据的步骤" tabindex="-1"><a class="header-anchor" href="#_3-实现xhr请求数据的步骤"><span>3.实现XHR请求数据的步骤</span></a></h3><ul><li><p>创建 <code>XMLHttpRequest</code> 对象</p></li><li><p>通过 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法与服务端建立连接</p></li><li><p>构建请求所需的数据内容，并通过<code> XMLHttpRequest</code> 对象的 <code>send()</code> 方法发送给服务器端</p></li><li><p>通过 <code>XMLHttpRequest</code> 对象提供的 <code>readystatechange、loadend</code> 事件监听服务器端的通信状态</p></li><li><p>接受并处理服务端向客户端响应的数据结果</p></li><li><p>将处理结果更新到 <code>HTML</code>页面中</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://example.com/data.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">&gt;=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="xhr-open方法" tabindex="-1"><a class="header-anchor" href="#xhr-open方法"><span>XHR Open方法</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token punctuation">[</span>async<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> user<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span> password<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>method请求方法</strong></p><table><thead><tr><th>GET</th><th>获取数据</th></tr></thead><tbody><tr><td>POST</td><td>数据提交</td></tr><tr><td>PUT</td><td>修改数据(全部)</td></tr><tr><td>DELETE</td><td>删除数据</td></tr><tr><td>PATCH</td><td>修改数据(部分)</td></tr></tbody></table><h4 id="onreadystatechange-状态" tabindex="-1"><a class="header-anchor" href="#onreadystatechange-状态"><span>onreadystatechange 状态</span></a></h4><ul><li>0：请求未初始化</li><li>1：服务器连接已建立</li><li>2：请求已接收</li><li>3：请求处理中</li><li>4：请求已完成，且响应已就绪</li></ul><h4 id="setrequestheader-设置请求类型" tabindex="-1"><a class="header-anchor" href="#setrequestheader-设置请求类型"><span>setRequestHeader 设置请求类型</span></a></h4><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/ajax/demo.php&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="content-type-类型" tabindex="-1"><a class="header-anchor" href="#content-type-类型"><span>Content-Type 类型</span></a></h4><p><code>application/json</code>：用于传输 JSON 格式的数据</p><p><code>application/xml</code>：用于传输 XML 格式的数据</p><p><code>text/plain</code>：纯文本格式，通常用于普通文本文件</p><p><code>text/html</code>：用于传输 HTML 格式的数据</p><p><code>image/jpeg, image/png, image/gif</code>：用于传输图像数据</p><p><code>multipart/form-data</code>：通常用于<strong>上传</strong>文件，表单数据会被编码成一系列的部分</p><p><code>application/x-www-form-urlencoded</code>：通常用于发送<strong>表单</strong>数据，数据会被编码为键值对的形式（表单默认的提交数据的格式）</p><h4 id="取消请求" tabindex="-1"><a class="header-anchor" href="#取消请求"><span>取消请求</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>xhr.abort()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,29),o=[p];function c(l,i){return a(),s("div",null,o)}const d=n(e,[["render",c],["__file","ajax请求.html.vue"]]),r=JSON.parse('{"path":"/guide/JavaScript/ajax%E8%AF%B7%E6%B1%82.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Ajax 请求","slug":"ajax-请求","link":"#ajax-请求","children":[{"level":3,"title":"1.什么是Ajax ?","slug":"_1-什么是ajax","link":"#_1-什么是ajax","children":[]},{"level":3,"title":"2.Ajax优缺点","slug":"_2-ajax优缺点","link":"#_2-ajax优缺点","children":[]},{"level":3,"title":"3.实现XHR请求数据的步骤","slug":"_3-实现xhr请求数据的步骤","link":"#_3-实现xhr请求数据的步骤","children":[]}]}],"git":{"updatedTime":1712798294000,"contributors":[{"name":"陈小知","email":"cjq314@qq.com","commits":1}]},"filePathRelative":"guide/JavaScript/ajax请求.md","excerpt":"<h2>Ajax 请求</h2>\\n<h3>1.什么是Ajax ?</h3>\\n<p>就是使用 <strong>XMLHttpRequest</strong> 对象与服务器通信。</p>\\n<h3>2.Ajax优缺点</h3>\\n<p>优点：</p>\\n<ul>\\n<li>页面无需刷新与服务端进行通信</li>\\n<li>可以实现局部刷新功能</li>\\n</ul>\\n<p>缺点：</p>\\n<ul>\\n<li>存在跨域问题</li>\\n<li>对SEO不友好</li>\\n</ul>\\n<h3>3.实现XHR请求数据的步骤</h3>\\n<ul>\\n<li>\\n<p>创建 <code>XMLHttpRequest</code> 对象</p>\\n</li>\\n<li>\\n<p>通过 <code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法与服务端建立连接</p>\\n</li>\\n<li>\\n<p>构建请求所需的数据内容，并通过<code> XMLHttpRequest</code> 对象的 <code>send()</code> 方法发送给服务器端</p>\\n</li>\\n<li>\\n<p>通过 <code>XMLHttpRequest</code> 对象提供的 <code>readystatechange、loadend</code> 事件监听服务器端的通信状态</p>\\n</li>\\n<li>\\n<p>接受并处理服务端向客户端响应的数据结果</p>\\n</li>\\n<li>\\n<p>将处理结果更新到 <code>HTML</code>页面中</p>\\n</li>\\n</ul>"}');export{d as comp,r as data};
