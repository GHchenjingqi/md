import{_ as n,o as s,c as a,a as t}from"./app-jHvIG5Zx.js";const p={},e=t(`<h3 id="websocket是什么" tabindex="-1"><a class="header-anchor" href="#websocket是什么"><span>WebSocket是什么？</span></a></h3><p>WebSocket是一种协议，用于提供低延迟/全双工/长连接的客户端与服务器通信方式。</p><p>**半双工：**通信双方不能同时发消息，只能等待一方发完，另一方才能发送消息。</p><p><strong>全双工</strong>：通信的双方可以同时发送和接收消息，不需要等待对方相应和传输完成。</p><p>应用场景：</p><ul><li>即时通讯</li><li>游戏</li></ul><h3 id="客户端网络信息" tabindex="-1"><a class="header-anchor" href="#客户端网络信息"><span>客户端网络信息</span></a></h3><p><strong>响应码：101</strong></p><p><strong>响应头：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// Upgrade连接
Connection:Upgrade
// 提供基础的防护，减少恶意连接
Sec-Websocket-Accept:PXw5jD28Z2rpv/HTi51a1KS2HtI=
// Upgrade类型：websocket
Upgrade:websocket
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>响应体</strong>：</p><ul><li>显示客户端和服务器发送的消息记录</li></ul><h3 id="对比传统方法" tabindex="-1"><a class="header-anchor" href="#对比传统方法"><span>对比传统方法</span></a></h3><p><strong>传统实现即时通讯的方法</strong>：</p><ul><li><strong>轮询</strong>：定期向服务器发送请求，频繁请求服务器；</li><li><strong>长轮询</strong>：客户端发送请求后，保持连接打开，等待新数据相应后再关闭连接；请求还是比较频繁。</li><li><strong>comet</strong>：保持长连接，在往返请求后继续保持连接打开，它是基于http模型，模拟的长连接；</li></ul><p><strong>传统实现双向通信的方法缺点：</strong></p><p>用的轮询长轮询，缺点会产生大量的请求和响应，造成不必要的网络开销和延迟</p><h3 id="websocket的缺点" tabindex="-1"><a class="header-anchor" href="#websocket的缺点"><span>WebSocket的缺点</span></a></h3><ul><li>不提供加密功能。如需保证数据安全，需要设置白名单或SSL协议。</li><li>不支持IE10以前浏览器。采用ajax替代。</li><li>需要不断的维护优化长连接，不然会过度消耗服务器资源。</li></ul><h3 id="websocket事件方法有" tabindex="-1"><a class="header-anchor" href="#websocket事件方法有"><span>WebSocket事件方法有：</span></a></h3><ul><li>onopen 开启通信</li><li>onmessage 接收消息</li><li>onerror 发生错误时触发</li><li>onclose 连接关闭时触发</li></ul><p><strong>WebSocket方法</strong></p><ul><li>send 发送消息</li><li>close 关闭连接</li></ul><h3 id="客户端与服务器使用websocket通信案例" tabindex="-1"><a class="header-anchor" href="#客户端与服务器使用websocket通信案例"><span>客户端与服务器使用WebSocket通信案例</span></a></h3><p>WebSocket通信的最小单位是：帧。</p><p>服务端采用nodejs：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.创建服务器的实例对象</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// WebSocket配置开始端口服务</span>
<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;恭喜你，连上客户端了！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">incoming</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务端接收: %s&#39;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 服务端发送至客户</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;你好啊，用户!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Example app listening on port 3000!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端使用js接收消息：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 客户端需要通过 WebSocket 创建连接，连接开头是ws+服务端的地址</span>
<span class="token keyword">let</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:8080&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 开启通信</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ws onopen&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送消息</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;ws真好用！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 接收消息</span>
ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ws onmessage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;服务端传回: &#39;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="websocket的心跳机制-为什么websocket需要心跳机制" tabindex="-1"><a class="header-anchor" href="#websocket的心跳机制-为什么websocket需要心跳机制"><span>WebSocket的心跳机制：为什么WebSocket需要心跳机制？</span></a></h3><p>为了保持WebSocket稳定的长连接，服务器和客户端之间通过心跳包来保持连接状态。以房子长时间没有数据传输而被切断。</p><p>**心跳包：**一种特殊的数据帧包（空数据），定期发送，确保连接有效不中断！</p><p>改造客户端代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&#39;ws://localhost:8080&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// WebSocket 建立连接</span>
<span class="token keyword">const</span> heartCheck <span class="token operator">=</span> <span class="token function">initHeartCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；<span class="token comment">// 初始化心跳检测对象</span>

<span class="token comment">// WebSocket建立连接成功</span>
socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　heartCheck<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动心跳检测</span>
　　socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello Server!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// WebSocket接受到服务端消息</span>
socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  heartCheck<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动心跳检测</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// WebSocket 连接被关闭</span>
socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  heartCheck<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动心跳检测</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// WebSocket 连接因错误而关闭</span>
socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  heartCheck<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启动心跳检测</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">initHeartCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 每2s向服务端发送一次消息</span>
            <span class="token literal-property property">serverTimeout</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">// 10s收不到服务端消息算超时</span>
            <span class="token literal-property property">timer</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
            <span class="token literal-property property">serverTimer</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
            <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 心跳检测重置</span>
                <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>serverTimer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>serverTimer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 心跳检测启动</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
                    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;ping&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定时向服务端发送消息</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>serverTimer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>serverTimer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                            <span class="token comment">// 关闭连接触发重连</span>
                           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;not received pong, close the websocket&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                          socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关闭websocket或根据业务需求去重连 </span>
                        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>serverTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","WebSocket使用.html.vue"]]),r=JSON.parse('{"path":"/guide/JavaScript/WebSocket%E4%BD%BF%E7%94%A8.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"WebSocket是什么？","slug":"websocket是什么","link":"#websocket是什么","children":[]},{"level":3,"title":"客户端网络信息","slug":"客户端网络信息","link":"#客户端网络信息","children":[]},{"level":3,"title":"对比传统方法","slug":"对比传统方法","link":"#对比传统方法","children":[]},{"level":3,"title":"WebSocket的缺点","slug":"websocket的缺点","link":"#websocket的缺点","children":[]},{"level":3,"title":"WebSocket事件方法有：","slug":"websocket事件方法有","link":"#websocket事件方法有","children":[]},{"level":3,"title":"客户端与服务器使用WebSocket通信案例","slug":"客户端与服务器使用websocket通信案例","link":"#客户端与服务器使用websocket通信案例","children":[]},{"level":3,"title":"WebSocket的心跳机制：为什么WebSocket需要心跳机制？","slug":"websocket的心跳机制-为什么websocket需要心跳机制","link":"#websocket的心跳机制-为什么websocket需要心跳机制","children":[]}],"git":{"updatedTime":1712798294000,"contributors":[{"name":"陈小知","email":"cjq314@qq.com","commits":1}]},"filePathRelative":"guide/JavaScript/WebSocket使用.md","excerpt":"<h3>WebSocket是什么？</h3>\\n<p>WebSocket是一种协议，用于提供低延迟/全双工/长连接的客户端与服务器通信方式。</p>\\n<p>**半双工：**通信双方不能同时发消息，只能等待一方发完，另一方才能发送消息。</p>\\n<p><strong>全双工</strong>：通信的双方可以同时发送和接收消息，不需要等待对方相应和传输完成。</p>\\n<p>应用场景：</p>\\n<ul>\\n<li>即时通讯</li>\\n<li>游戏</li>\\n</ul>\\n<h3>客户端网络信息</h3>\\n<p><strong>响应码：101</strong></p>\\n<p><strong>响应头：</strong></p>"}');export{k as comp,r as data};
