import{_ as a,c as n,b as s,o as r}from"./app-DMoYNb1f.js";const l={};function i(t,e){return r(),n("div",null,e[0]||(e[0]=[s(`<h1 id="数组原型方法学习" tabindex="-1"><a class="header-anchor" href="#数组原型方法学习"><span>数组原型方法学习</span></a></h1><blockquote><p>之前总是使用数组的一些常用的方法，例如：push,slice,shift，unshift,pop...，根本没去观察数组原型上自带的方法都有哪些，今天无意中打印了一个空Array数组，发现其原型Array下面有将近35个方法和一个length属性。</p></blockquote><h3 id="arr-at" tabindex="-1"><a class="header-anchor" href="#arr-at"><span>arr.at()</span></a></h3><p>定义：获取访问指定索引的元素值，可以接受负数，从尾部开始索引。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;1&quot;,3,&quot;4&quot;,&quot;苹果&quot;]</span>
<span class="line">console.log(arr.at(2)); //4</span>
<span class="line">console.log(arr.at(-2)); //4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>at()方法虽然新颖，但是很多人会问，这不是和属性访问器 arr[2] 效果一样嘛？为什么还新增一个方法？ 答案是肯定的，属性访问方法不接收负值，当我们需要从尾部获取时，就很不方便了，at()方法恰好解决了这样的问题。</p><h3 id="arr-cancat-arr1-arr2-arr3" tabindex="-1"><a class="header-anchor" href="#arr-cancat-arr1-arr2-arr3"><span>arr.cancat(arr1,arr2,arr3)</span></a></h3><p>定义：连接多个数组，返回一个组合后的数组。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr1 = [1];</span>
<span class="line">let arr2 = [1,3,4,&quot;a&quot;];</span>
<span class="line">let arr3 = arr1.concat(arr2);//[1, 1, 3, 4, &#39;a&#39;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样我们就实现数组拼接组合，当然若拼接的第一个数组是[]空数组，就实现了一个数组拷贝，这也是数组拷贝的一个方法，而且是深拷贝哦。</p><h3 id="arr-constructor" tabindex="-1"><a class="header-anchor" href="#arr-constructor"><span>arr.constructor()</span></a></h3><p>定义：属性返回对创建此对象的数组函数的引用。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2];</span>
<span class="line">let res = arr.constructor();// []</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这里的constructor()是数组的引用，并不是指向构造函数constructor，一个带括号一个不带。 所有数组的constructor()引用值都是 &quot;[]&quot;。</p><h3 id="arr-copywithin-target-start-end" tabindex="-1"><a class="header-anchor" href="#arr-copywithin-target-start-end"><span>arr.copyWithin(target,start,end)</span></a></h3><p>定义：用于从数组的指定位置拷贝元素到数组的另一个指定位置中。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,3,4,5,6,7,8];</span>
<span class="line">let res = arr.copyWithin(2,0);// [1, 2,   1, 2, 3, 4, 5, 6]</span>
<span class="line">let res = arr.copyWithin(2,0,2);// [1, 2,   1, 2,   5, 6, 7, 8]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：copyWithin会导致原数组变化，返回被改变后的数组，而不是新数组。 理解这个方法也简单，target参数时插入指定位置，start是拷贝开始位置，end是拷贝截止，不设置end就从start到默认最后。</p><h3 id="arr-entries" tabindex="-1"><a class="header-anchor" href="#arr-entries"><span>arr.entries()</span></a></h3><p>定义：返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)，通过next().value 方法获取迭代的键值对。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;];</span>
<span class="line">let res = arr.entries(); // Array Iterator {}</span>
<span class="line">console.log(res.next().value);//[0, &#39;1&#39;]</span>
<span class="line">console.log(res.next().value);//[0, &#39;2&#39;]</span>
<span class="line">console.log(res.next().value);//[0, &#39;3&#39;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-every" tabindex="-1"><a class="header-anchor" href="#arr-every"><span>arr.every()</span></a></h3><p>定义：用于检测数组所有元素是否都符合指定条件，返回布尔值。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;];</span>
<span class="line">let res = arr.every(item =&gt;{</span>
<span class="line">	return Number(item)  &gt; 0</span>
<span class="line">}); // true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-fill-val-start-end" tabindex="-1"><a class="header-anchor" href="#arr-fill-val-start-end"><span>arr.fill(val,start,end)</span></a></h3><p>定义：用于使用固定值填充数组。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;];</span>
<span class="line">let res = arr.fill(0,2);//[&#39;1&#39;, &#39;2&#39;, 0, 0, 0, 0, 0, 0]</span>
<span class="line">let res = arr.fill(0,2,6); //[&#39;1&#39;, &#39;2&#39;, 0, 0, 0, 0, &#39;7&#39;, &#39;8&#39;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：end默认是到最后位置，省略之后就填充到最后。</p><h3 id="arr-filter" tabindex="-1"><a class="header-anchor" href="#arr-filter"><span>arr.filter()</span></a></h3><p>定义：返回数组中符合条件的元素。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;];</span>
<span class="line">let res = arr.filter(item =&gt;{</span>
<span class="line">	return Number(item)  &gt; 6</span>
<span class="line">}); // [&#39;7&#39;, &#39;8&#39;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-find" tabindex="-1"><a class="header-anchor" href="#arr-find"><span>arr.find()</span></a></h3><p>定义：返回数组中满足条件的第一个元素，如果没有符合条件的元素返回 undefined</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;];</span>
<span class="line">let res = arr.find(item =&gt;{</span>
<span class="line">	return Number(item)  &gt; 6</span>
<span class="line">}); // 7</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：不是返回所有满足元素，二是第一个，后面可能还有第二个...</p><h3 id="arr-findindex" tabindex="-1"><a class="header-anchor" href="#arr-findindex"><span>arr.findIndex()</span></a></h3><p>定义：返回数组中满足条件的第一个元素索引值，如果没有符合条件的元素返回 -1</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;];</span>
<span class="line">let res = arr.findIndex(item =&gt;{</span>
<span class="line">	return Number(item)  &gt; 6</span>
<span class="line">}); // 6</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-flat-number" tabindex="-1"><a class="header-anchor" href="#arr-flat-number"><span>arr.flat(number)</span></a></h3><p>定义：所有元素与遍历到的子数组中的元素合并为一个新数组返回。俗称，拍扁数组。 number是深度，默认是1，也就是二维数组。任意深度用Infinity</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1, 2, [3, 4]];</span>
<span class="line">arr.flat();//[1, 2, 3, 4]</span>
<span class="line"></span>
<span class="line">let arr1 = [1, 2, [3, 4, [5, 6]]];</span>
<span class="line">arr1.flat(Infinity);//[1, 2, 3, 4, 5, 6]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，flat()默认只能拍扁二维数组，更深的就会拍扁失败。就需要改变number的值。</p><h3 id="arr-flatmap" tabindex="-1"><a class="header-anchor" href="#arr-flatmap"><span>arr.flatMap()</span></a></h3><p>定义：映射每个元素，然后将结果压缩成一个新数组。有点类似map，对比如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,3,5,7]</span>
<span class="line">let res =arr.map(x =&gt; [x * 2]); </span>
<span class="line">console.log(res);//[[2],[6],[10],[14]]</span>
<span class="line"></span>
<span class="line">let res1 =arr.flatMap(x =&gt; [x * 2])</span>
<span class="line">console.log(res1);//[2, 6, 10, 14]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-foreach" tabindex="-1"><a class="header-anchor" href="#arr-foreach"><span>arr.forEach()</span></a></h3><p>定义：遍历循环数组每一项，然后执行回调。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;];</span>
<span class="line">arr.forEach(function (item,index){</span>
<span class="line">	arr[index] = item * 2</span>
<span class="line">}); // [2, 4, 6, 8, 10, 12, 14, 16]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：forEach没有返回值，不能用表达式方式，表达式会得到undefined</p><h3 id="arr-from" tabindex="-1"><a class="header-anchor" href="#arr-from"><span>arr.from()</span></a></h3><p>定义：用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = Array.from(&quot;study&quot;);//[&#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;d&#39;, &#39;y&#39;]</span>
<span class="line">let arr1 = Array.from(new Set([1,2,4]));//[1,2,4]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：必须是带length属性的对象，使用之前可以判断length是否存在。</p><h3 id="arr-includes" tabindex="-1"><a class="header-anchor" href="#arr-includes"><span>arr.includes()</span></a></h3><p>定义：用来判断一个数组是否包含一个指定的值，返回布尔值。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,5,&quot;a&quot;];</span>
<span class="line">console.log(arr.includes(5)); //true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用来优化if多条件判断语句，避免多个||或语句判断。</p><h3 id="arr-indexof" tabindex="-1"><a class="header-anchor" href="#arr-indexof"><span>arr.indexOf()</span></a></h3><p>定义：返回数组中某个指定的元素位置。不存在返回 -1</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,5,&quot;a&quot;];</span>
<span class="line">console.log(arr.indexOf(5)); // 2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以用来判断是否包含一个元素</p><h3 id="arr-isarray" tabindex="-1"><a class="header-anchor" href="#arr-isarray"><span>arr.isArray()</span></a></h3><p>定义：判断是否是数组，返回布尔值。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,5,&quot;a&quot;];</span>
<span class="line">console.log(Array.isArray(arr)); // true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-join-separator" tabindex="-1"><a class="header-anchor" href="#arr-join-separator"><span>arr.join(separator)</span></a></h3><p>定义：用于把数组中的所有元素转换一个字符串。separator是分隔符，可为空。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span>
<span class="line">let res = arr.join(&quot;|&quot;); // Banana|Orange|Apple|Mango</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-keys" tabindex="-1"><a class="header-anchor" href="#arr-keys"><span>arr.keys()</span></a></h3><p>定义：创建一个数组迭代对象， 该对象包含了数组的键。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span>
<span class="line">let res = arr.keys(); //  Array Iterator</span>
<span class="line">console.log(res.next().value); // 0</span>
<span class="line">console.log(res.next().value); // 1</span>
<span class="line">console.log(res.next().value); // 2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-lastindexof" tabindex="-1"><a class="header-anchor" href="#arr-lastindexof"><span>arr.lastIndexOf()</span></a></h3><p>定义：返回一个指定的元素在数组中最后出现的位置。没有找到返回 -1</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,5,&quot;a&quot;];</span>
<span class="line">console.log(arr.lastIndexOf(5)); // 1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-map" tabindex="-1"><a class="header-anchor" href="#arr-map"><span>arr.map()</span></a></h3><p>定义：返回一个每一项被处理过的新数组。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span>
<span class="line">let res = arr.map((item,index)=&gt;{</span>
<span class="line"> 	return item+&quot;_&quot;+index;</span>
<span class="line">});// [&#39;Banana_0&#39;, &#39;Orange_1&#39;, &#39;Apple_2&#39;, &#39;Mango_3&#39;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-pop" tabindex="-1"><a class="header-anchor" href="#arr-pop"><span>arr.pop()</span></a></h3><p>定义：删除数组最后一项，并返回这个元素。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span>
<span class="line">let res = arr.pop();</span>
<span class="line">console.log(arr);//[&#39;Banana&#39;, &#39;Orange&#39;, &#39;Apple&#39;]</span>
<span class="line">console.log(res);//Mango</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，原数组已经被改变！！！返回的结果是删除的部分。</p><h3 id="arr-push" tabindex="-1"><a class="header-anchor" href="#arr-push"><span>arr.push()</span></a></h3><p>定义：向数组的末尾添加一个或多个元素，并返回新的长度。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span>
<span class="line">let res = arr.push(&quot;橘子&quot;,&quot;柚子&quot;);</span>
<span class="line">console.log(arr);//[&#39;Banana&#39;, &#39;Orange&#39;, &#39;Apple&#39;, &#39;Mango&#39;, &#39;橘子&#39;, &#39;柚子&#39;]</span>
<span class="line">console.log(res);//6</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-reduce-function-total-currentvalue-currentindex-arr-initialvalue" tabindex="-1"><a class="header-anchor" href="#arr-reduce-function-total-currentvalue-currentindex-arr-initialvalue"><span>arr.reduce(function(total, currentValue, currentIndex, arr), initialValue)</span></a></h3><p>定义：接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</p><p>回调函数参数：total——累计值 currentValue-当前元素 currentIndex-当前元素的索引 arr—— 当前数组 initialValue——total的初始值</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,3,4,5];</span>
<span class="line">let res = arr.reduce((total,item)=&gt;{</span>
<span class="line"> 	return total+item;</span>
<span class="line">}); // 15</span>
<span class="line">let res1 = arr.reduce((total,item)=&gt;{</span>
<span class="line"> 	return total+item;</span>
<span class="line">},10); // 25</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>reduce()多用于数组求和，求乘积。</p><h3 id="arr-reduceright-function-total-currentvalue-currentindex-arr-initialvalue" tabindex="-1"><a class="header-anchor" href="#arr-reduceright-function-total-currentvalue-currentindex-arr-initialvalue"><span>arr.reduceRight(function(total, currentValue, currentIndex, arr), initialValue)</span></a></h3><p>定义：和 reduce() 功能是一样的，不同的是 reduceRight() 从数组的末尾向前将数组中的数组项做累加。</p><p>回调函数参数：total——累计值 currentValue-当前元素 currentIndex-当前元素的索引 arr—— 当前数组 initialValue——total的初始值</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,3,4,5];</span>
<span class="line">let res = arr.reduceRight((total,item)=&gt;{</span>
<span class="line"> 	return total-item;</span>
<span class="line">}); // -5</span>
<span class="line">let res1 = arr.reduceRight((total,item)=&gt;{</span>
<span class="line"> 	return total-item;</span>
<span class="line">},100); // 85</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-reverse" tabindex="-1"><a class="header-anchor" href="#arr-reverse"><span>arr.reverse()</span></a></h3><p>定义：颠倒数组中元素的顺序。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,3,4,5];</span>
<span class="line">let res = arr.reverse(); //[5, 4, 3, 2, 1]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-shift" tabindex="-1"><a class="header-anchor" href="#arr-shift"><span>arr.shift()</span></a></h3><p>定义：删除数组的第一个元素，并返回这个元素。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span>
<span class="line">let res = arr.shift();</span>
<span class="line">console.log(arr);//[&#39;Orange&#39;, &#39;Apple&#39;, &#39;Mango&#39;]</span>
<span class="line">console.log(res);//Banana</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-slice-start-end" tabindex="-1"><a class="header-anchor" href="#arr-slice-start-end"><span>arr.slice(start,end)</span></a></h3><p>定义：截取数组中的一部分，并返回这部分，不改变原数组。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span>
<span class="line">let res = arr.slice(1,3);//[&#39;Orange&#39;, &#39;Apple&#39;]</span>
<span class="line">let res = arr.slice(-2);;//[&#39;Apple&#39;, &#39;Mango&#39;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-some" tabindex="-1"><a class="header-anchor" href="#arr-some"><span>arr.some()</span></a></h3><p>定义：判断数组中是否有满足条件的任意一项。返回布尔值，有一个满足就返回true。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,3,4,5];</span>
<span class="line">let res = arr.some(item =&gt;{</span>
<span class="line"> 	return item &gt;=5</span>
<span class="line">});//true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-sort" tabindex="-1"><a class="header-anchor" href="#arr-sort"><span>arr.sort()</span></a></h3><p>定义：用于对数组的元素进行排序。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,11,20,3,4,5];</span>
<span class="line">let res = arr.sort((a,b) =&gt;{</span>
<span class="line"> 	return a-b;//升序</span>
<span class="line">});//[1, 2, 3, 4, 5, 11, 20]</span>
<span class="line">let res1 = arr.sort((a,b) =&gt;{</span>
<span class="line"> 	return b-a;//降序</span>
<span class="line">});//[20, 11, 5, 4, 3, 2, 1]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-splice-index-number-item1-item2" tabindex="-1"><a class="header-anchor" href="#arr-splice-index-number-item1-item2"><span>arr.splice(index,number,item1,item2)</span></a></h3><p>定义：用于添加或删除数组中的元素。删除时候并返回删除的内容。 参数：index - 添加删除位置 number - 删除数量 item —— 添加的元素</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,3,4,5,6,7,8];</span>
<span class="line">//删除</span>
<span class="line">let res = arr.splice(2,6);</span>
<span class="line">console.log(arr);// [1, 2]</span>
<span class="line">console.log(res);// [3, 4, 5, 6, 7, 8]</span>
<span class="line">//删除并新增</span>
<span class="line">let res = arr.splice(2,1,30,100);</span>
<span class="line">console.log(arr);// [1, 2, 30, 100, 4, 5, 6, 7, 8]</span>
<span class="line">console.log(res);//[3]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-tostring" tabindex="-1"><a class="header-anchor" href="#arr-tostring"><span>arr.toString()</span></a></h3><p>定义：数组转字符串，以&quot;,&quot;分割。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [1,2,3,4,5,6,7,8];</span>
<span class="line">let res = arr.toString();</span>
<span class="line">console.log(res);//1,2,3,4,5,6,7,8</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-unshift" tabindex="-1"><a class="header-anchor" href="#arr-unshift"><span>arr.unshift()</span></a></h3><p>定义：向数组的开头添加一个或更多元素，并返回新的长度。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span>
<span class="line">let res = arr.unshift(&quot;Lemon&quot;,&quot;Pineapple&quot;);</span>
<span class="line">console.log(arr);// [&#39;Lemon&#39;, &#39;Pineapple&#39;, &#39;Banana&#39;, &#39;Orange&#39;, &#39;Apple&#39;, &#39;Mango&#39;]</span>
<span class="line">console.log(res);// 6</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-values" tabindex="-1"><a class="header-anchor" href="#arr-values"><span>arr.values()</span></a></h3><p>定义：用于从数组创建一个包含数组值的可迭代对象。和keys一样，不过是以value值组成的数组。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">let arr = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span>
<span class="line">let res = arr.values();// Array Iterator</span>
<span class="line">console.log(res.next().value);// Banana</span>
<span class="line">console.log(res.next().value);// Orange</span>
<span class="line">console.log(res.next().value);// Apple</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arr-length" tabindex="-1"><a class="header-anchor" href="#arr-length"><span>arr.length</span></a></h3><p>定义：数组的长度，空数组length为0。</p><p>以上就是数组的全部方法了，目前截止到ES6，扩展到了35个方法，死记硬背也不好弄，关键还是理解，这些方法比较灵活。 例如：</p><ul><li>转字符串：toString 或 join</li><li>获取数组：at 或 属性访问器</li><li>添加删除数组：pop,push,slice,shift,unshift,splice</li><li>拷贝数组：concat,copyWithin</li><li>遍历数组：some,map,filter,reduce,reduceRight,every,forEach</li><li>排序倒序：sort,reverse</li><li>查找元素：find,indexOf,includes,lastIndexOf,findIndex</li><li>可迭代：keys,values,entries</li><li>其他方法：fill,flat,flatMap,from,isArray</li></ul><p>好了，继续复习吧！希望大家都不要依靠框架，还是以基础为主，前端目前都开始卷框架了，已经偏离了方向。吾日三省吾身，不进则退！—— 陈小知</p>`,124)]))}const u=a(l,[["render",i]]),c=JSON.parse('{"path":"/mds/array.html","title":"数组原型方法学习","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"arr.at()","slug":"arr-at","link":"#arr-at","children":[]},{"level":3,"title":"arr.cancat(arr1,arr2,arr3)","slug":"arr-cancat-arr1-arr2-arr3","link":"#arr-cancat-arr1-arr2-arr3","children":[]},{"level":3,"title":"arr.constructor()","slug":"arr-constructor","link":"#arr-constructor","children":[]},{"level":3,"title":"arr.copyWithin(target,start,end)","slug":"arr-copywithin-target-start-end","link":"#arr-copywithin-target-start-end","children":[]},{"level":3,"title":"arr.entries()","slug":"arr-entries","link":"#arr-entries","children":[]},{"level":3,"title":"arr.every()","slug":"arr-every","link":"#arr-every","children":[]},{"level":3,"title":"arr.fill(val,start,end)","slug":"arr-fill-val-start-end","link":"#arr-fill-val-start-end","children":[]},{"level":3,"title":"arr.filter()","slug":"arr-filter","link":"#arr-filter","children":[]},{"level":3,"title":"arr.find()","slug":"arr-find","link":"#arr-find","children":[]},{"level":3,"title":"arr.findIndex()","slug":"arr-findindex","link":"#arr-findindex","children":[]},{"level":3,"title":"arr.flat(number)","slug":"arr-flat-number","link":"#arr-flat-number","children":[]},{"level":3,"title":"arr.flatMap()","slug":"arr-flatmap","link":"#arr-flatmap","children":[]},{"level":3,"title":"arr.forEach()","slug":"arr-foreach","link":"#arr-foreach","children":[]},{"level":3,"title":"arr.from()","slug":"arr-from","link":"#arr-from","children":[]},{"level":3,"title":"arr.includes()","slug":"arr-includes","link":"#arr-includes","children":[]},{"level":3,"title":"arr.indexOf()","slug":"arr-indexof","link":"#arr-indexof","children":[]},{"level":3,"title":"arr.isArray()","slug":"arr-isarray","link":"#arr-isarray","children":[]},{"level":3,"title":"arr.join(separator)","slug":"arr-join-separator","link":"#arr-join-separator","children":[]},{"level":3,"title":"arr.keys()","slug":"arr-keys","link":"#arr-keys","children":[]},{"level":3,"title":"arr.lastIndexOf()","slug":"arr-lastindexof","link":"#arr-lastindexof","children":[]},{"level":3,"title":"arr.map()","slug":"arr-map","link":"#arr-map","children":[]},{"level":3,"title":"arr.pop()","slug":"arr-pop","link":"#arr-pop","children":[]},{"level":3,"title":"arr.push()","slug":"arr-push","link":"#arr-push","children":[]},{"level":3,"title":"arr.reduce(function(total, currentValue, currentIndex, arr), initialValue)","slug":"arr-reduce-function-total-currentvalue-currentindex-arr-initialvalue","link":"#arr-reduce-function-total-currentvalue-currentindex-arr-initialvalue","children":[]},{"level":3,"title":"arr.reduceRight(function(total, currentValue, currentIndex, arr), initialValue)","slug":"arr-reduceright-function-total-currentvalue-currentindex-arr-initialvalue","link":"#arr-reduceright-function-total-currentvalue-currentindex-arr-initialvalue","children":[]},{"level":3,"title":"arr.reverse()","slug":"arr-reverse","link":"#arr-reverse","children":[]},{"level":3,"title":"arr.shift()","slug":"arr-shift","link":"#arr-shift","children":[]},{"level":3,"title":"arr.slice(start,end)","slug":"arr-slice-start-end","link":"#arr-slice-start-end","children":[]},{"level":3,"title":"arr.some()","slug":"arr-some","link":"#arr-some","children":[]},{"level":3,"title":"arr.sort()","slug":"arr-sort","link":"#arr-sort","children":[]},{"level":3,"title":"arr.splice(index,number,item1,item2)","slug":"arr-splice-index-number-item1-item2","link":"#arr-splice-index-number-item1-item2","children":[]},{"level":3,"title":"arr.toString()","slug":"arr-tostring","link":"#arr-tostring","children":[]},{"level":3,"title":"arr.unshift()","slug":"arr-unshift","link":"#arr-unshift","children":[]},{"level":3,"title":"arr.values()","slug":"arr-values","link":"#arr-values","children":[]},{"level":3,"title":"arr.length","slug":"arr-length","link":"#arr-length","children":[]}],"git":{},"filePathRelative":"mds/array.md","excerpt":"\\n<blockquote>\\n<p>之前总是使用数组的一些常用的方法，例如：push,slice,shift，unshift,pop...，根本没去观察数组原型上自带的方法都有哪些，今天无意中打印了一个空Array数组，发现其原型Array下面有将近35个方法和一个length属性。</p>\\n</blockquote>\\n<h3>arr.at()</h3>\\n<p>定义：获取访问指定索引的元素值，可以接受负数，从尾部开始索引。</p>\\n<div class=\\"language-text line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"text\\"><pre><code><span class=\\"line\\">let arr = [\\"1\\",3,\\"4\\",\\"苹果\\"]</span>\\n<span class=\\"line\\">console.log(arr.at(2)); //4</span>\\n<span class=\\"line\\">console.log(arr.at(-2)); //4</span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{u as comp,c as data};
