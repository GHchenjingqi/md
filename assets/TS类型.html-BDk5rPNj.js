import{_ as n,o as s,c as a,a as e}from"./app-jHvIG5Zx.js";const t={},p=e(`<h1 id="typescript基本类型" tabindex="-1"><a class="header-anchor" href="#typescript基本类型"><span>TypeScript基本类型</span></a></h1><p>TypeScript 通过 TypeScript 编译器或 Babel 转译为 JavaScript 代码。Typescript 是JavaScript的超集，是<strong>微软</strong>对js的升级，弥补了js弱类型的缺陷，因此<strong>TypeScript是一种强类型语言</strong>。</p><p><strong>类型注解，为变量添加类型约束！</strong> 变量后跟 “: 类型” ，这种写法就叫 类型注解。</p><h3 id="_1-数值类型-number" tabindex="-1"><a class="header-anchor" href="#_1-数值类型-number"><span>1.数值类型 number</span></a></h3><p>与JavaScript一样，所有的数字在TypeScript中都是<strong>浮点数</strong>。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-布尔类型-boolean" tabindex="-1"><a class="header-anchor" href="#_2-布尔类型-boolean"><span>2.布尔类型 boolean</span></a></h3><p>boolean类型只可能是两种值。它们分别是true和false。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> bool<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-字符串类型-string" tabindex="-1"><a class="header-anchor" href="#_3-字符串类型-string"><span>3.字符串类型 string</span></a></h3><p>使用字符串是将它们放在单引号或者双引号中间。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;Hello, TypeScript&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-数组类型-array" tabindex="-1"><a class="header-anchor" href="#_4-数组类型-array"><span>4.数组类型 array</span></a></h3><p>array类型的声明有两种写法。</p><p>第一种在数组元素的类型后面跟着[];</p><p>第二种是使用泛型数组类型Array。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr1<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2<span class="token operator">:</span> array<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr3<span class="token operator">:</span> array<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 任意类型数组</span>
<span class="token keyword">let</span> arr4<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;222&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 联合类型数组，需要用括号包起来</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类型别名，当一个复杂类型重复使用时，就可以使用类型别名简化类型。类型别名需要用 <strong>type</strong> 关键字声明。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>type ass = (number | string)[];
let arr4:ass = [&#39;aaa&#39;,3,&#39;1&#39;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-元组-tuple" tabindex="-1"><a class="header-anchor" href="#_5-元组-tuple"><span>5.元组 tuple</span></a></h3><p>元组tuple就是固定长度的数组，明确指定数组包含多少个元素，比如坐标元素。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> job<span class="token operator">:</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;送外卖&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;送快递&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-空类型-void" tabindex="-1"><a class="header-anchor" href="#_6-空类型-void"><span>6.空类型 void</span></a></h3><p>void空类型一般用于函数无返回结果的场景。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-枚举类型-enum" tabindex="-1"><a class="header-anchor" href="#_7-枚举类型-enum"><span>7.枚举类型 enum</span></a></h3><p>enum枚举类型用于一些常量集合。数字枚举成员的值默认是从0自增的，当然也可以自定义值。字符串枚举每个对象都必须有值，数字枚举可以部分有值。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> Direction  <span class="token punctuation">{</span>
  Up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
  Down <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  Left <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  Right <span class="token operator">=</span> <span class="token number">3</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 枚举属性值未赋值会从0递增</span>
<span class="token keyword">enum</span> Direction  <span class="token punctuation">{</span>
  Up<span class="token punctuation">,</span><span class="token comment">//0</span>
  Down<span class="token punctuation">,</span><span class="token comment">//1</span>
  Left<span class="token punctuation">,</span><span class="token comment">//2</span>
  Right<span class="token comment">//3</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 字符串枚举</span>
<span class="token keyword">enum</span> Direction  <span class="token punctuation">{</span>
  Up <span class="token operator">=</span> <span class="token string">&#39;up&#39;</span><span class="token punctuation">,</span>
  Down <span class="token operator">=</span> <span class="token string">&#39;down&#39;</span><span class="token punctuation">,</span>
  Left <span class="token operator">=</span> <span class="token string">&#39;left&#39;</span><span class="token punctuation">,</span>
  Right <span class="token operator">=</span> <span class="token string">&#39;right&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-任意类型-any" tabindex="-1"><a class="header-anchor" href="#_8-任意类型-any"><span>8.任意类型 any</span></a></h3><p>any类型可以表示任意JavaScript值。<strong>不推荐使用</strong>，原因是在赋值和使用任意类型变量时会导致相关的变量均污染成任意类型，失去了TS类型语言的意义。</p><h3 id="_9-未知类型-unknown" tabindex="-1"><a class="header-anchor" href="#_9-未知类型-unknown"><span>9.未知类型 unknown</span></a></h3><p>unknown未知类型和any任意类型很接近，但是使用未知类型会类型报错，这时解决办法就是使用类型断言。</p><h4 id="ts的类型断言有2种写法-关键字as-类型-值" tabindex="-1"><a class="header-anchor" href="#ts的类型断言有2种写法-关键字as-类型-值"><span>TS的类型断言有2种写法：关键字as || &lt;类型&gt;值</span></a></h4><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> e<span class="token operator">:</span><span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s<span class="token operator">:</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&quot;hi&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// s = e  直接赋值就会类型报错</span>
s <span class="token operator">=</span> e <span class="token keyword">as</span> <span class="token builtin">string</span>
s <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>e

<span class="token comment">// 不断言就无法获取到a元素的类型，获取href就会报不存在</span>
<span class="token keyword">let</span> alink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementByID</span><span class="token punctuation">(</span><span class="token string">&#39;link&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLAnchorElement
<span class="token comment">// HTMLAnchorElement 可以通过控制台 console.dir 打印改元素</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TS除了类型断言，还有非空断言：! -当使用非空断言的时候就是表示告诉编辑器该变量不会为空。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token string">&#39;hi&#39;</span> <span class="token operator">+</span> name<span class="token operator">!</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_10-永远不会有返回值类型-never" tabindex="-1"><a class="header-anchor" href="#_10-永远不会有返回值类型-never"><span>10.永远不会有返回值类型 never</span></a></h3><p>never一般用于报错函数的返回值类型：永远不会有返回值类型</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">never</span><span class="token punctuation">{</span>
	<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;失败了！&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-字面量类型" tabindex="-1"><a class="header-anchor" href="#_11-字面量类型"><span>11.字面量类型</span></a></h3><p>字面量类型直接理解为限制的值，可与联合类型使用</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> sex<span class="token operator">:</span><span class="token string">&#39;男&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;女&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;未知&#39;</span>   <span class="token comment">// sex 的值只能是男，女，和未知，其他都会报错</span>
sex <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-对象-object" tabindex="-1"><a class="header-anchor" href="#_12-对象-object"><span>12.对象 object</span></a></h3><p>TS里面定义对象通过 <strong>{}</strong> 进行对象属性类型声明，多个属性可以用 “；”或“，”分割。可选属性通过 ’<strong>?</strong>‘ 表示；多个未知任意属性通过 <strong>[xx:string]:any</strong> 表示。</p><p>也可以用<strong>type</strong>先描述一个对象结构，再使用这个结构类型限制对象。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> obj1<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">}</span>
<span class="token keyword">let</span> obj2<span class="token operator">:</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span> age<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>propname<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// type 描述一个对象的类型</span>
<span class="token keyword">type</span> <span class="token class-name">mytype</span> <span class="token operator">=</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> obj3<span class="token operator">:</span>mytype <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">40</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_13-函数表达式类型" tabindex="-1"><a class="header-anchor" href="#_13-函数表达式类型"><span>13.函数表达式类型</span></a></h3><p>TS也可以在定义函数之前先声明函<strong>数参数及返回值</strong>的类型</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-接口类型-interface" tabindex="-1"><a class="header-anchor" href="#_14-接口类型-interface"><span>14.接口类型 interface</span></a></h3><p>接口用来定义一个类结构，用来定义类应该包含哪些属性和方法。同时，接口也可以当初类声明去使用，同type描述对象属性类型结构。也是简化重复使用的对象类型。</p><p>接口只定义对象的结构，不关心实际值。</p><p>用interface定义同一个接口名，里面属性不同，等效与属性组合在一起（合并）。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">myobj</span><span class="token punctuation">{</span>
	name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">myobj</span><span class="token punctuation">{</span>
    sex<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> obj<span class="token operator">:</span>myobj <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span>
    age<span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>
    sex<span class="token operator">:</span><span class="token number">1</span>
<span class="token punctuation">}</span>
<span class="token comment">// 接口便于对象结构的复用</span>
<span class="token keyword">let</span> obj2<span class="token operator">:</span>myobj<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口第二个用法就是：<strong>继承接口，实现一个类</strong>。需要使用 <strong>interface</strong> 和 <strong>implements</strong> 关键字。接口就是用来 <strong>定义类的规范</strong>。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 声明类结构及方法</span>
<span class="token keyword">interface</span> <span class="token class-name">myint</span><span class="token punctuation">{</span>
	name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>
	<span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">myclass</span> <span class="token keyword">implements</span> <span class="token class-name">myint</span><span class="token punctuation">{</span>
	name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">;</span>
	<span class="token comment">// 需要增加一个构造函数定义初始属性</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**接口继承，可以用extends 关键字实现接口继承。**两个接口有<em>公共的属性</em>就可以把公共的作为父类接口，其他属性通过子类继承实现。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Mypoint</span><span class="token punctuation">{</span>
	x<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>
	y<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 继承父类接口的所有属性，也可以新增子类自己的属性</span>
<span class="token keyword">interface</span> <span class="token class-name">Point3D</span> <span class="token keyword">extends</span> <span class="token class-name">Mypoint</span><span class="token punctuation">{</span>
	z<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-泛型-generics" tabindex="-1"><a class="header-anchor" href="#_15-泛型-generics"><span>15.泛型 Generics</span></a></h3><p>泛型是值在定义<strong>函数，接口或类</strong>时，遇到参数或返回值类型不明确时，需要用泛型表示参数和返回值的类型。</p><p>定义时不确定类型，在函数调用执行时，才明确数据类型。</p><p>泛型类型：由于是未知，因此可以用任意变量代替。一般常用T,K,U等作为泛型函数、类、接口的类型。</p><p>泛型函数：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> a
<span class="token punctuation">}</span>

<span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 返回结果是数字</span>
<span class="token keyword">let</span> res2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 返回值是字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型函数的也参数值可以是多个：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span><span class="token constant">K</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">,</span>b<span class="token operator">:</span><span class="token constant">K</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">{</span>
	<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;hi ts&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 返回结果是数字</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型接口：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">FnInter</span><span class="token punctuation">{</span>
 	<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> Fn<span class="token operator">:</span> FnInter <span class="token operator">=</span> fn

<span class="token comment">// 或</span>
<span class="token keyword">interface</span> <span class="token class-name">FnInter<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>
 <span class="token punctuation">(</span>arg<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> Fn<span class="token operator">:</span> FnInter<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> fn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型约束：通过接口+extends 实现泛型约束。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 约束参数必须是带length属性的</span>
<span class="token keyword">interface</span> <span class="token class-name">Inter</span><span class="token punctuation">{</span>
	length<span class="token operator">:</span><span class="token builtin">number</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">fn</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Inter<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>泛型类：类里面使用泛型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">myclass<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">{</span>
	name<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">;</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span><span class="token constant">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 泛型由传进去的参数决定</span>
<span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myclass</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_16-联合类型" tabindex="-1"><a class="header-anchor" href="#_16-联合类型"><span>16.联合类型</span></a></h3><p>联合类型表示变量的类型不固定，是多种类型。用 “|” 分割多个类型。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> a<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_17-交叉类型" tabindex="-1"><a class="header-anchor" href="#_17-交叉类型"><span>17.交叉类型</span></a></h3><p>交叉类型也是多个类型，使用 “&amp;” 分割多个类型，表示同时满足所有类型特性。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">type</span> <span class="token class-name">Employee</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  companyId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  role<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
 
<span class="token keyword">type</span> <span class="token class-name">PersonEmployee</span> <span class="token operator">=</span> Person <span class="token operator">&amp;</span> Employee<span class="token punctuation">;</span>
 
<span class="token keyword">const</span> personEmployee<span class="token operator">:</span> PersonEmployee <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span>
  age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
  companyId<span class="token operator">:</span> <span class="token string">&quot;ABC123&quot;</span><span class="token punctuation">,</span>
  role<span class="token operator">:</span> <span class="token string">&quot;Manager&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-工具类型" tabindex="-1"><a class="header-anchor" href="#_18-工具类型"><span>18.工具类型</span></a></h3><p>TS内置很多工具类型，例如：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>- Parameters&lt;Type&gt; 获取函数的参数类型，将每个参数类型放进一个元组中。
- ReturnType&lt;Type&gt; 获取函数的返回值类型。
- Awaited&lt;Type&gt; 获取\`Promise\`中的结果类型
- NonNullable&lt;Type&gt; 去除类型中的null,和undefined
- Omit&lt;Type, Keys&gt; 移除一些属性, 用Omit&lt;T, K&gt;从T中取出除去K的，返回剩余的属性类型。
- Pick&lt;Type, Keys&gt; 从Type中选取一系列的属性, 用Pick, 构成新的类型。
- Required&lt;Type&gt; 将类型的所有属性变为必选。
- Partial&lt;Type&gt; 将类型的所有属性变为可选。
- Readonly&lt;Type&gt; 将数组或对象的属性值转换为只读的。
- Record&lt;Type&gt; 将对象所有属性都转换成指定类型。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,81),o=[p];function l(c,i){return s(),a("div",null,o)}const u=n(t,[["render",l],["__file","TS类型.html.vue"]]),d=JSON.parse('{"path":"/guide/TypeScript/TS%E7%B1%BB%E5%9E%8B.html","title":"TypeScript基本类型","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"1.数值类型 number","slug":"_1-数值类型-number","link":"#_1-数值类型-number","children":[]},{"level":3,"title":"2.布尔类型 boolean","slug":"_2-布尔类型-boolean","link":"#_2-布尔类型-boolean","children":[]},{"level":3,"title":"3.字符串类型 string","slug":"_3-字符串类型-string","link":"#_3-字符串类型-string","children":[]},{"level":3,"title":"4.数组类型 array","slug":"_4-数组类型-array","link":"#_4-数组类型-array","children":[]},{"level":3,"title":"5.元组 tuple","slug":"_5-元组-tuple","link":"#_5-元组-tuple","children":[]},{"level":3,"title":"6.空类型 void","slug":"_6-空类型-void","link":"#_6-空类型-void","children":[]},{"level":3,"title":"7.枚举类型 enum","slug":"_7-枚举类型-enum","link":"#_7-枚举类型-enum","children":[]},{"level":3,"title":"8.任意类型 any","slug":"_8-任意类型-any","link":"#_8-任意类型-any","children":[]},{"level":3,"title":"9.未知类型 unknown","slug":"_9-未知类型-unknown","link":"#_9-未知类型-unknown","children":[]},{"level":3,"title":"10.永远不会有返回值类型 never","slug":"_10-永远不会有返回值类型-never","link":"#_10-永远不会有返回值类型-never","children":[]},{"level":3,"title":"11.字面量类型","slug":"_11-字面量类型","link":"#_11-字面量类型","children":[]},{"level":3,"title":"12.对象 object","slug":"_12-对象-object","link":"#_12-对象-object","children":[]},{"level":3,"title":"13.函数表达式类型","slug":"_13-函数表达式类型","link":"#_13-函数表达式类型","children":[]},{"level":3,"title":"14.接口类型 interface","slug":"_14-接口类型-interface","link":"#_14-接口类型-interface","children":[]},{"level":3,"title":"15.泛型 Generics","slug":"_15-泛型-generics","link":"#_15-泛型-generics","children":[]},{"level":3,"title":"16.联合类型","slug":"_16-联合类型","link":"#_16-联合类型","children":[]},{"level":3,"title":"17.交叉类型","slug":"_17-交叉类型","link":"#_17-交叉类型","children":[]},{"level":3,"title":"18.工具类型","slug":"_18-工具类型","link":"#_18-工具类型","children":[]}],"git":{"updatedTime":1712798294000,"contributors":[{"name":"陈小知","email":"cjq314@qq.com","commits":1}]},"filePathRelative":"guide/TypeScript/TS类型.md","excerpt":"\\n<p>TypeScript 通过 TypeScript 编译器或 Babel 转译为 JavaScript 代码。Typescript 是JavaScript的超集，是<strong>微软</strong>对js的升级，弥补了js弱类型的缺陷，因此<strong>TypeScript是一种强类型语言</strong>。</p>\\n<p><strong>类型注解，为变量添加类型约束！</strong> 变量后跟 “: 类型” ，这种写法就叫 类型注解。</p>\\n<h3>1.数值类型 number</h3>\\n<p>与JavaScript一样，所有的数字在TypeScript中都是<strong>浮点数</strong>。</p>"}');export{u as comp,d as data};
