import{_ as s,c as a,b as p,o as e}from"./app-BI9Ul3hK.js";const t={};function l(o,n){return e(),a("div",null,n[0]||(n[0]=[p(`<p>功能描述：根据接口返回和前端自定义指令传参，进行鉴权匹配，鉴权通过显示按钮，否则页面不创建按钮元素。</p><p>功能实现：</p><h3 id="_1-自定义指令" tabindex="-1"><a class="header-anchor" href="#_1-自定义指令"><span>1.自定义指令</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">const</span> directive <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">hasBtn</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">inserted</span><span class="token operator">:</span> hasPermission<span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">update</span><span class="token operator">:</span>hasPermission</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">* 判断根据父页面name和按钮名字判断是否有按钮权限</span>
<span class="line">* 可根据name或id进行绑定页面按钮权限</span>
<span class="line">* v-hasBtn=&quot;[&#39;parentName&#39;,&#39;btnName&#39;]&quot;</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">hasPermission2</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding<span class="token punctuation">,</span>vnode</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> <span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span><span class="token punctuation">[</span>parentName<span class="token punctuation">,</span>btnName<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token operator">=</span>binding</span>
<span class="line">  <span class="token keyword">let</span> has <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token keyword">let</span> btsGroups <span class="token operator">=</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>buttons</span>
<span class="line">  <span class="token comment">// 通过 vnode上下文获取路由信息</span></span>
<span class="line">  <span class="token keyword">const</span> router <span class="token operator">=</span> vnode<span class="token punctuation">.</span>context<span class="token punctuation">.</span>$router<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> routerName <span class="token operator">=</span> router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>name；</span>
<span class="line">  <span class="token comment">// 循环比较参数信息是否一致</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>btsGroups <span class="token operator">&amp;&amp;</span> btsGroups<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> btsGroups<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> btn <span class="token operator">=</span> btsGroups<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>parentName<span class="token operator">==</span> routerName <span class="token operator">&amp;&amp;</span> btn<span class="token punctuation">.</span>name <span class="token operator">==</span> btnName<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        has <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>has<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    el<span class="token punctuation">.</span>parentNode <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-全局注入指令" tabindex="-1"><a class="header-anchor" href="#_2-全局注入指令"><span>2.全局注入指令</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> directive <span class="token keyword">from</span> <span class="token string">&#39;@/directive&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 全局注册自定义指令</span></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>directive<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-页面使用" tabindex="-1"><a class="header-anchor" href="#_3-页面使用"><span>3.页面使用</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;btn&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;handlesendMsg(row)&quot;</span>  v<span class="token operator">-</span>hasBtn<span class="token operator">=</span><span class="token string">&quot;[&#39;editPage&#39;,&#39;send&#39;]&quot;</span><span class="token operator">&gt;</span>发布<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,8)]))}const i=s(t,[["render",l]]),r=JSON.parse(`{"path":"/mds/vue2%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B-%E6%8C%89%E9%92%AE%E9%89%B4%E6%9D%83%E5%8A%9F%E8%83%BD.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"1.自定义指令","slug":"_1-自定义指令","link":"#_1-自定义指令","children":[]},{"level":3,"title":"2.全局注入指令","slug":"_2-全局注入指令","link":"#_2-全局注入指令","children":[]},{"level":3,"title":"3.页面使用","slug":"_3-页面使用","link":"#_3-页面使用","children":[]}],"git":{},"filePathRelative":"mds/vue2项目自定义指令使用案例-按钮鉴权功能.md","excerpt":"<p>功能描述：根据接口返回和前端自定义指令传参，进行鉴权匹配，鉴权通过显示按钮，否则页面不创建按钮元素。</p>\\n<p>功能实现：</p>\\n<h3>1.自定义指令</h3>\\n<div class=\\"language-javascript line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> <span class=\\"token keyword\\">const</span> directive <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token literal-property property\\">hasBtn</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token literal-property property\\">inserted</span><span class=\\"token operator\\">:</span> hasPermission<span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">        <span class=\\"token literal-property property\\">update</span><span class=\\"token operator\\">:</span>hasPermission</span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\">/*</span>\\n<span class=\\"line\\">* 判断根据父页面name和按钮名字判断是否有按钮权限</span>\\n<span class=\\"line\\">* 可根据name或id进行绑定页面按钮权限</span>\\n<span class=\\"line\\">* v-hasBtn=\\"['parentName','btnName']\\"</span>\\n<span class=\\"line\\">*/</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">hasPermission2</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">el<span class=\\"token punctuation\\">,</span>binding<span class=\\"token punctuation\\">,</span>vnode</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">let</span> <span class=\\"token punctuation\\">{</span><span class=\\"token literal-property property\\">value</span><span class=\\"token operator\\">:</span><span class=\\"token punctuation\\">[</span>parentName<span class=\\"token punctuation\\">,</span>btnName<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">}</span><span class=\\"token operator\\">=</span>binding</span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">let</span> has <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">let</span> btsGroups <span class=\\"token operator\\">=</span> store<span class=\\"token punctuation\\">.</span>state<span class=\\"token punctuation\\">.</span>buttons</span>\\n<span class=\\"line\\">  <span class=\\"token comment\\">// 通过 vnode上下文获取路由信息</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">const</span> router <span class=\\"token operator\\">=</span> vnode<span class=\\"token punctuation\\">.</span>context<span class=\\"token punctuation\\">.</span>$router<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">const</span> routerName <span class=\\"token operator\\">=</span> router<span class=\\"token punctuation\\">.</span>currentRoute<span class=\\"token punctuation\\">.</span>name；</span>\\n<span class=\\"line\\">  <span class=\\"token comment\\">// 循环比较参数信息是否一致</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>btsGroups <span class=\\"token operator\\">&amp;&amp;</span> btsGroups<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> index <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> index <span class=\\"token operator\\">&lt;</span> btsGroups<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">;</span> index<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">      <span class=\\"token keyword\\">const</span> btn <span class=\\"token operator\\">=</span> btsGroups<span class=\\"token punctuation\\">[</span>index<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>parentName<span class=\\"token operator\\">==</span> routerName <span class=\\"token operator\\">&amp;&amp;</span> btn<span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">==</span> btnName<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        has <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span></span>\\n<span class=\\"line\\">        <span class=\\"token keyword\\">break</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">      <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>has<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    el<span class=\\"token punctuation\\">.</span>parentNode <span class=\\"token operator\\">&amp;&amp;</span> el<span class=\\"token punctuation\\">.</span>parentNode<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">removeChild</span><span class=\\"token punctuation\\">(</span>el<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{i as comp,r as data};
