import{_ as s,c as a,b as e,o as p}from"./app-DMoYNb1f.js";const t={};function l(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h2 id="worker对象" tabindex="-1"><a class="header-anchor" href="#worker对象"><span>Worker对象</span></a></h2><p>worker用于创建子线程，不会阻塞主线程，互不干涉。它是一种网络接口，不能直接访问window和dom元素。</p><p>self 是线程js的当前对象。</p><h5 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景：</span></a></h5><ul><li>处理超大数据</li><li>分析视频、音频、pdf等文件</li></ul><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h4><p>父页面和线程js通过<strong>postMessage</strong>传递消息；</p><p>通过<strong>onmessage</strong> 接收数据。</p><p>错误通过onerror捕获。</p><h4 id="关闭线程" tabindex="-1"><a class="header-anchor" href="#关闭线程"><span>关闭线程</span></a></h4><p>线程开启之后需要手动关闭，不然一直在。</p><ul><li>主线程关闭子线程</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">work<span class="token punctuation">.</span><span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>子线程关闭当前线程</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">self<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="案例" tabindex="-1"><a class="header-anchor" href="#案例"><span>案例：</span></a></h4><p>主线程 - 父页面</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">var</span> work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&quot;./a.js&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 父页面传递数据</span></span>
<span class="line">work<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 父页面接收子线程处理后的数据</span></span>
<span class="line">work<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子线程 - js文件</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 接收消息</span></span>
<span class="line">self<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// 处理数据</span></span>
<span class="line">	<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token function">sort</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line">	<span class="token comment">// 向主线程发送消息</span></span>
<span class="line">	self<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// 关闭子线程</span></span>
<span class="line">    self<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子线程不能使用以下</p><ul><li>window 对象</li><li>document 对象</li><li>parent 对象</li><li>alert 和 confirm</li></ul>`,22)]))}const i=s(t,[["render",l]]),r=JSON.parse('{"path":"/mds/Worker%E7%BA%BF%E7%A8%8B%E4%BD%BF%E7%94%A8.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Worker对象","slug":"worker对象","link":"#worker对象","children":[]}],"git":{},"filePathRelative":"mds/Worker线程使用.md","excerpt":"<h2>Worker对象</h2>\\n<p>worker用于创建子线程，不会阻塞主线程，互不干涉。它是一种网络接口，不能直接访问window和dom元素。</p>\\n<p>self 是线程js的当前对象。</p>\\n<h5>应用场景：</h5>\\n<ul>\\n<li>处理超大数据</li>\\n<li>分析视频、音频、pdf等文件</li>\\n</ul>\\n<h4>使用</h4>\\n<p>父页面和线程js通过<strong>postMessage</strong>传递消息；</p>\\n<p>通过<strong>onmessage</strong> 接收数据。</p>\\n<p>错误通过onerror捕获。</p>\\n<h4>关闭线程</h4>"}');export{i as comp,r as data};
